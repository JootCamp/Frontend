{"version":3,"sources":["components/Header.js","config.js","pages/LoginPage.js","pages/FreeBoard.js","pages/NewPost.js","pages/PostDetail.js","context/AuthContext.js","pages/ProfilePage.js","pages/SignupPage.js","pages/Playground.js","pages/CreateBoard.js","App.js","reportWebVitals.js","index.js"],"names":["Header","_ref","user","setUser","navigate","useNavigate","React","createElement","className","onClick","handleProfile","handleSignup","handleLogout","API_BASE_URL","LoginPage","email","setEmail","useState","password","setPassword","error","setError","onSubmit","e","preventDefault","loginData","fetch","method","headers","Content-Type","body","JSON","stringify","credentials","then","response","ok","Error","get","json","loggedIn","data","catch","console","type","placeholder","value","onChange","target","required","FreeBoard","posts","setPosts","metadata","setMetadata","boardId","useParams","useEffect","length","map","post","key","id","postId","handleViewPost","title","userId","time","stopPropagation","userEmail","nickname","filter","handleDeletePost","handleCreatePost","NewPost","setTitle","content","setContent","newPost","PostDetail","setPost","handleEditPost","AuthContext","createContext","AuthProvider","children","Provider","login","userData","logout","ProfilePage","useContext","username","SignupPage","name","setName","confirmPassword","setConfirmPassword","setNickname","signupData","Playground","boards","setBoards","board","handleBoardClick","description","handleCreateBoard","CreateBoard","setDescription","newBoard","App","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.b2c81e1d.chunk.js","sourcesContent":["// src/components/Header.js\r\nimport React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../style/Header.css';\r\n\r\nconst Header = ({ user, setUser }) => {\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogout = () => {\r\n    setUser(null);\r\n    navigate('/');\r\n  };\r\n\r\n  const handleProfile = () => {\r\n    if (user) {\r\n      navigate('/profile');\r\n    } else {\r\n      navigate('/login');\r\n    }\r\n  };\r\n\r\n  const handleSignup = () => {\r\n    navigate('/signup');\r\n  };\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"header-left\">\r\n        <h1 onClick={() => navigate('/')}>Jootcamp</h1>\r\n        <nav className=\"nav\">\r\n          <ul>\r\n            <li><button onClick={() => navigate('/freeboard')}>자유게시판</button></li>\r\n            <li><button onClick={() => navigate('/playground')}>놀이터</button></li> {/* 놀이터 추가 */}\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n      <div className=\"header-right\">\r\n        <button className=\"info-button\" onClick={handleProfile}>\r\n          {user ? '내 정보' : 'Login'}\r\n        </button>\r\n        {!user && (\r\n          <button className=\"signup-button\" onClick={handleSignup}>\r\n            회원가입\r\n          </button>\r\n        )}\r\n        {user && (\r\n          <button className=\"login-button\" onClick={handleLogout}>\r\n            Logout\r\n          </button>\r\n        )}\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","export const API_BASE_URL = 'http://13.125.19.45:8080';","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../style/LoginPage.css';\r\nimport { API_BASE_URL } from '../config';\r\n\r\nconst LoginPage = ({ setUser }) => {\r\n  // 이메일과 비밀번호를 입력받기 위한 상태 변수\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  // 에러 메시지를 저장하기 위한 상태 변수\r\n  const [error, setError] = useState('');\r\n  // 페이지 이동을 위한 navigate 함수\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault(); // 폼 제출 시 페이지 리로드 방지\r\n\r\n    const loginData = { email, password }; // 서버에 전송할 로그인 데이터\r\n\r\n    // 서버에 로그인 요청을 보냄\r\n    fetch(`${API_BASE_URL}/login`, {\r\n      method: 'POST', // HTTP 메서드로 POST 사용\r\n      headers: {\r\n        'Content-Type': 'application/json', // JSON 형식으로 데이터 전송\r\n      },\r\n      body: JSON.stringify(loginData), // 로그인 데이터를 JSON으로 변환하여 전송\r\n      credentials: 'include' //쿠키 확인\r\n    })\r\n      .then(response => {\r\n        if (response.ok) { // 서버가 200 OK 응답을 보낸 경우\r\n          if (response.headers.get('content-length') === '0') {\r\n            // 서버에서 응답 데이터가 없을 경우, 간단히 로그인 상태로 설정\r\n            setUser({ loggedIn: true });\r\n          } else {\r\n            return response.json(); // 서버에서 응답 데이터가 있는 경우 JSON으로 파싱\r\n          }\r\n          navigate('/'); // 로그인 성공 시 메인 페이지로 이동\r\n        } else {\r\n          setError('로그인에 실패했습니다. 다시 시도해 주세요.'); // 로그인 실패 시 에러 메시지 설정\r\n          throw new Error('Login failed'); // 에러를 발생시켜 catch 블록으로 이동\r\n        }\r\n      })\r\n      .then(data => {\r\n        if (data) {\r\n          setUser(data); // 유저 정보를 상태에 설정\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error logging in:', error); // 콘솔에 에러 출력\r\n        setError('서버 오류가 발생했습니다. 나중에 다시 시도해 주세요.'); // 서버 오류 발생 시 에러 메시지 설정\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <form onSubmit={handleLogin} className=\"login-form\">\r\n        <h2>로그인</h2>\r\n        {error && <p className=\"error-message\">{error}</p>} {/* 에러 메시지 표시 */}\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"이메일\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)} // 이메일 입력 시 상태 업데이트\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)} // 비밀번호 입력 시 상태 업데이트\r\n          required\r\n        />\r\n        <button type=\"submit\">로그인</button> {/* 로그인 버튼 */}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport '../style/FreeBoard.css';\r\nimport { API_BASE_URL } from '../config';\r\n\r\nconst FreeBoard = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [metadata, setMetadata] = useState({}); // 페이지네이션 메타데이터 추가\r\n  const { boardId } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts?size=20&page=1`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setPosts(data.data || []); // API 명세서에 맞게 'data'로 접근\r\n        setMetadata(data.metadata); // 페이지네이션 메타데이터 설정\r\n      })\r\n      .catch(error => console.error('Error fetching posts:', error));\r\n  }, [boardId]);\r\n\r\n  const handleViewPost = (postId) => {\r\n    navigate(`/boards/${boardId}/posts/${postId}`);\r\n  };\r\n\r\n  const handleCreatePost = () => {\r\n    navigate(`/boards/${boardId}/new-post`);\r\n  };\r\n\r\n  const handleDeletePost = (postId) => {\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts/${postId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        userId: 1, // 추가: API 명세에 맞게 삭제 요청에 userId 등 전달\r\n        userEmail: 'user@example.com',\r\n        nickname: 'User',\r\n      }),\r\n    })\r\n      .then(() => {\r\n        setPosts(posts.filter(post => post.id !== postId)); // API 명세서에 맞게 'id'로 삭제\r\n      })\r\n      .catch(error => console.error('Error deleting post:', error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"freeboard-container\">\r\n      <h2>자유게시판</h2>\r\n      {posts.length > 0 ? (\r\n        <div className=\"post-list\">\r\n          {posts.map(post => (\r\n            <div key={post.id} className=\"post-item\" onClick={() => handleViewPost(post.id)}>\r\n              <div className=\"post-info\">\r\n                <h3 className=\"post-title\">{post.title}</h3>\r\n                <div className=\"post-meta\">\r\n                  <span className=\"post-author\">작성자: {post.userId}</span>\r\n                  <span className=\"post-date\">작성일: {post.time}</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"post-actions\">\r\n                <button className=\"view-button\">보기</button>\r\n                <button className=\"delete-button\" onClick={(e) => {e.stopPropagation(); handleDeletePost(post.id)}}>삭제</button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <p>게시글이 없습니다. 글쓰기를 통해 새 게시글을 작성해보세요.</p>\r\n      )}\r\n      <button className=\"create-post-button\" onClick={handleCreatePost}>글쓰기</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FreeBoard;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport '../style/NewPost.css';\r\nimport { API_BASE_URL } from '../config';\r\n\r\nconst NewPost = ({ user }) => { // user 객체를 props로 받아옴\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const { boardId } = useParams(); // boardId를 URL에서 가져옴\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // 게시글 생성 요청에 필요한 데이터\r\n    const newPost = {\r\n      title,\r\n      content,\r\n      userId: user.id, // userId는 사용자의 ID로 설정\r\n      userEmail: user.email, // 사용자의 이메일\r\n      nickname: user.nickname // 사용자의 닉네임\r\n    };\r\n\r\n    // 게시글 생성 요청\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(newPost),\r\n    })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('게시글 생성에 실패했습니다.');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(() => {\r\n        navigate(`/boards/${boardId}`); // 게시글 생성 후 해당 게시판으로 이동\r\n      })\r\n      .catch(error => console.error('Error creating post:', error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"new-post-container\">\r\n      <h2>새 글 작성</h2>\r\n      <form onSubmit={handleSubmit} className=\"new-post-form\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"제목\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          required\r\n        />\r\n        <textarea\r\n          placeholder=\"내용\"\r\n          value={content}\r\n          onChange={(e) => setContent(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\" className=\"submit-button\">작성</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPost;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport '../style/PostDetail.css';\r\nimport { API_BASE_URL } from '../config';\r\n\r\nconst PostDetail = ({ user }) => {\r\n  const { boardId, postId } = useParams();\r\n  const [post, setPost] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  // 게시물 단건 조회\r\n  useEffect(() => {\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts/${postId}`)\r\n      .then(response => response.json())\r\n      .then(data => setPost(data))\r\n      .catch(error => console.error('Error fetching post:', error));\r\n  }, [boardId, postId]);\r\n\r\n  // 게시글 삭제\r\n  const handleDeletePost = () => {\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts/${postId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        userId: user.id,        // userId를 요청에 포함\r\n        userEmail: user.email,  // userEmail을 요청에 포함\r\n        nickname: user.nickname // nickname을 요청에 포함\r\n      }),\r\n    })\r\n      .then(() => {\r\n        navigate(`/boards/${boardId}`); // 삭제 후 게시판으로 이동\r\n      })\r\n      .catch(error => console.error('Error deleting post:', error));\r\n  };\r\n\r\n  // 게시글 수정 페이지로 이동\r\n  const handleEditPost = () => {\r\n    navigate(`/boards/${boardId}/posts/${postId}/edit`);\r\n  };\r\n\r\n  if (!post) return <div>Loading...</div>;\r\n\r\n  return (\r\n    <div className=\"post-detail-container\">\r\n      <h2>{post.title}</h2>\r\n      <p className=\"post-content\">{post.content}</p>\r\n      <div className=\"post-meta\">\r\n        <span>작성자: {post.userId}</span> {/* API 명세서에서 'userId'로 사용자 정보 표시 */}\r\n        <span>작성일: {post.time}</span>  {/* 작성 시간 표시 */}\r\n      </div>\r\n      <button onClick={handleEditPost}>수정</button>\r\n      <button onClick={handleDeletePost}>삭제</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostDetail;\r\n","import React, { createContext, useState, useContext } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  const login = (userData) => {\r\n    setUser(userData);\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n","import React from 'react';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport '../style/ProfilePage.css';\r\n\r\nconst ProfilePage = () => {\r\n  const { user } = useAuth();\r\n\r\n  return (\r\n    <div className=\"profile-container\">\r\n      <h2>내 정보</h2>\r\n      {user ? (\r\n        <div className=\"profile-details\">\r\n          <p><strong>Username:</strong> {user.username}</p>\r\n        </div>\r\n      ) : (\r\n        <p>로그인되지 않았습니다.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../style/SignupPage.css';\r\nimport { API_BASE_URL } from '../config';\r\n\r\n\r\nconst SignupPage = () => {\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [nickname, setNickname] = useState('');\r\n  const [error, setError] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleSignup = (e) => {\r\n    e.preventDefault();\r\n    if (password !== confirmPassword) {\r\n      setError('비밀번호가 일치하지 않습니다.');\r\n      return;\r\n    }\r\n  \r\n    const signupData = {\r\n      name,\r\n      email,\r\n      password,\r\n      nickname,\r\n    };\r\n  \r\n    fetch(`${API_BASE_URL}/signup`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(signupData),\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        if (data === true) { // API 명세서에 따라 true를 성공으로 간주\r\n          navigate('/login'); // 회원가입 성공 시 로그인 페이지로 이동\r\n        } else {\r\n          setError('회원가입에 실패했습니다. 다시 시도해 주세요.');\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error signing up:', error);\r\n        setError('서버 오류가 발생했습니다. 나중에 다시 시도해 주세요.');\r\n      });\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"signup-container\">\r\n      <h2>회원가입</h2>\r\n      <form onSubmit={handleSignup} className=\"signup-form\">\r\n        {error && <p className=\"error-message\">{error}</p>}\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"이름\"\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"닉네임\"\r\n          value={nickname}\r\n          onChange={(e) => setNickname(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"이메일\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"비밀번호 확인\"\r\n          value={confirmPassword}\r\n          onChange={(e) => setConfirmPassword(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\" className=\"signup-button\">회원가입</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignupPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../style/Playground.css';\r\nimport { API_BASE_URL } from '../config';\r\n\r\nconst Playground = () => {\r\n  const [boards, setBoards] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // API 명세에 맞게 게시판 목록을 가져옴\r\n    fetch(`${API_BASE_URL}/boards`)\r\n      .then(response => response.json())\r\n      .then(data => setBoards(data)) // 'id'를 사용하여 데이터 설정\r\n      .catch(error => console.error('Error fetching boards:', error));\r\n  }, []);\r\n\r\n  const handleCreateBoard = () => {\r\n    navigate('/create-board'); // 게시판 생성 페이지로 이동\r\n  };\r\n\r\n  const handleBoardClick = (boardId) => {\r\n    navigate(`/boards/${boardId}`); // 클릭한 게시판으로 이동\r\n  };\r\n\r\n  return (\r\n    <div className=\"playground-container\">\r\n      <h2>놀이터</h2>\r\n      <div className=\"boards-list\">\r\n        {boards.length > 0 ? (\r\n          boards.map(board => (\r\n            <div \r\n              key={board.id}  // API 명세서에 맞춰 'id' 사용\r\n              className=\"board-item\" \r\n              onClick={() => handleBoardClick(board.id)}  // 'boardId'를 'id'로 수정\r\n            >\r\n              <h3>{board.title}</h3>\r\n              <p>{board.description}</p>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>게시판이 없습니다. 새로운 게시판을 생성해보세요!</p>\r\n        )}\r\n      </div>\r\n      <button className=\"create-board-button\" onClick={handleCreateBoard}>게시판 생성</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Playground;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../style/CreateBoard.css';\r\nimport { API_BASE_URL } from '../config';\r\n\r\nconst CreateBoard = ({ user }) => { // user 객체를 props로 받음\r\n  const [title, setTitle] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [error, setError] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleCreateBoard = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!user || !user.id) {\r\n      setError('사용자 정보가 누락되었습니다. 로그인 후 시도해 주세요.');\r\n      return;\r\n    }\r\n    \r\n    const newBoard = {\r\n      title,\r\n      description,\r\n      userId: user.id,       // 명세에 맞게 userId 포함\r\n      userEmail: user.email, // userEmail 포함\r\n      nickname: user.nickname // nickname 포함\r\n    };\r\n\r\n    fetch(`${API_BASE_URL}/boards`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(newBoard),\r\n    })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('게시판 생성에 실패했습니다.');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(() => {\r\n        navigate('/playground'); // 생성 후 놀이터 페이지로 이동\r\n      })\r\n      .catch(error => {\r\n        console.error('Error creating board:', error);\r\n        setError('서버 오류가 발생했습니다. 나중에 다시 시도해 주세요.');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"create-board-container\">\r\n      <h2>게시판 생성</h2>\r\n      <form onSubmit={handleCreateBoard} className=\"create-board-form\">\r\n        {error && <p className=\"error-message\">{error}</p>}\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"게시판 제목\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          required\r\n        />\r\n        <textarea\r\n          placeholder=\"게시판 설명\"\r\n          value={description}\r\n          onChange={(e) => setDescription(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\" className=\"create-button\">생성</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateBoard;\r\n","import React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\nimport Header from './components/Header';\r\nimport LoginPage from './pages/LoginPage';\r\nimport FreeBoard from './pages/FreeBoard';\r\nimport NewPost from './pages/NewPost';\r\nimport PostDetail from './pages/PostDetail';\r\nimport ProfilePage from './pages/ProfilePage';\r\nimport SignupPage from './pages/SignupPage';\r\nimport Playground from './pages/Playground'; // 놀이터 페이지 추가\r\nimport CreateBoard from './pages/CreateBoard'; // 게시판 생성 페이지 추가\r\n\r\nconst App = () => {\r\n  const [user, setUser] = useState(null); // 전역으로 로그인 상태 관리\r\n\r\n  return (\r\n    <Router>\r\n      <Header user={user} setUser={setUser} />\r\n      <Routes>\r\n        <Route path=\"/login\" element={<LoginPage setUser={setUser} />} /> {/* setUser 전달 */}\r\n        <Route path=\"/signup\" element={<SignupPage />} />\r\n        <Route path=\"/freeboard\" element={<FreeBoard />} />\r\n        <Route path=\"/profile\" element={<ProfilePage />} />\r\n        \r\n        {/* 게시판 관련 라우트 */}\r\n        <Route path=\"/boards/:boardId\" element={<FreeBoard />} />\r\n        <Route path=\"/boards/:boardId/new-post\" element={<NewPost />} />\r\n        <Route path=\"/boards/:boardId/posts/:postId\" element={<PostDetail />} />\r\n        <Route path=\"/boards/:boardId/posts/:postId/edit\" element={<NewPost />} /> {/* 수정 시 NewPost 재사용 */}\r\n        \r\n        {/* 놀이터 및 게시판 생성 관련 라우트 */}\r\n        <Route path=\"/playground\" element={<Playground />} />\r\n        <Route path=\"/create-board\" element={<CreateBoard />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { AuthProvider } from './context/AuthContext';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  //<React.StrictMode>\r\n    <AuthProvider>\r\n      <App />\r\n    </AuthProvider>\r\n  //</React.StrictMode>\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}