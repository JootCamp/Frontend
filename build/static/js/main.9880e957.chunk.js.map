{"version":3,"sources":["components/Header.js","components/MainContent.js","pages/Home.js","pages/About.js","config.js","pages/LoginPage.js","pages/FreeBoard.js","pages/NewPost.js","pages/PostDetail.js","context/AuthContext.js","pages/ProfilePage.js","pages/SignupPage.js","pages/Playground.js","pages/CreateBoard.js","App.js","reportWebVitals.js","index.js"],"names":["Header","_ref","user","setUser","navigate","useNavigate","React","createElement","className","onClick","handleProfile","handleSignup","handleLogout","MainContent","alert","Home","About","API_BASE_URL","LoginPage","email","setEmail","useState","password","setPassword","error","setError","onSubmit","e","preventDefault","loginData","fetch","method","headers","Content-Type","body","JSON","stringify","then","response","ok","Error","get","json","loggedIn","data","catch","console","type","placeholder","value","onChange","target","required","FreeBoard","posts","setPosts","boardId","useParams","useEffect","results","length","map","post","key","pId","postId","handleViewPost","title","writer","views","created_at","stopPropagation","filter","handleDeletePost","handleCreatePost","NewPost","setTitle","content","setContent","newPost","bId","PostDetail","setPost","handleEditPost","AuthContext","createContext","AuthProvider","children","Provider","login","userData","logout","ProfilePage","useContext","username","name","SignupPage","setName","confirmPassword","setConfirmPassword","nickname","setNickname","signupData","Playground","boards","setBoards","board","handleBoardClick","description","handleCreateBoard","CreateBoard","setDescription","newBoard","App","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.9880e957.chunk.js","sourcesContent":["// src/components/Header.js\r\nimport React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../style/Header.css';\r\n\r\nconst Header = ({ user, setUser }) => {\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogout = () => {\r\n    setUser(null);\r\n    navigate('/');\r\n  };\r\n\r\n  const handleProfile = () => {\r\n    if (user) {\r\n      navigate('/profile');\r\n    } else {\r\n      navigate('/login');\r\n    }\r\n  };\r\n\r\n  const handleSignup = () => {\r\n    navigate('/signup');\r\n  };\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"header-left\">\r\n        <h1 onClick={() => navigate('/')}>Jootcamp</h1>\r\n        <nav className=\"nav\">\r\n          <ul>\r\n            <li><button onClick={() => navigate('/freeboard')}>자유게시판</button></li>\r\n            <li><button onClick={() => navigate('/playground')}>놀이터</button></li> {/* 놀이터 추가 */}\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n      <div className=\"header-right\">\r\n        <button className=\"info-button\" onClick={handleProfile}>\r\n          {user ? '내 정보' : 'Login'}\r\n        </button>\r\n        {!user && (\r\n          <button className=\"signup-button\" onClick={handleSignup}>\r\n            회원가입\r\n          </button>\r\n        )}\r\n        {user && (\r\n          <button className=\"login-button\" onClick={handleLogout}>\r\n            Logout\r\n          </button>\r\n        )}\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport '../style/MainContent.css';\r\n\r\nconst MainContent = () => {\r\n  return (\r\n    <main className=\"main-content\">\r\n      <h2>Welcome to Jootcamp</h2>\r\n      <nav className=\"content-nav\">\r\n        <button onClick={() => alert('All Content clicked')}>All Content</button>\r\n        <button onClick={() => alert('Announcements clicked')}>Announcements</button>\r\n        <button onClick={() => alert('My Information clicked')}>My Information</button>\r\n      </nav>\r\n      <div className=\"content-sections\">\r\n        {/* Your sections go here */}\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default MainContent;\r\n","import React from 'react';\r\nimport MainContent from '../components/MainContent';\r\nimport '../style/Home.css';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"home\">\r\n      <MainContent />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nconst About = () => {\r\n  return (\r\n    <div>\r\n      <h2>About Jootcamp</h2>\r\n      <p>Jootcamp is a platform for coders to share knowledge and learn together.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","export const API_BASE_URL = 'http://13.125.19.45:8080';","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../style/LoginPage.css';\r\nimport { API_BASE_URL } from '../config';\r\n\r\nconst LoginPage = ({ setUser }) => {\r\n  // 이메일과 비밀번호를 입력받기 위한 상태 변수\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  // 에러 메시지를 저장하기 위한 상태 변수\r\n  const [error, setError] = useState('');\r\n  // 페이지 이동을 위한 navigate 함수\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault(); // 폼 제출 시 페이지 리로드 방지\r\n\r\n    const loginData = { email, password }; // 서버에 전송할 로그인 데이터\r\n\r\n    // 서버에 로그인 요청을 보냄\r\n    fetch(`${API_BASE_URL}/login`, {\r\n      method: 'POST', // HTTP 메서드로 POST 사용\r\n      headers: {\r\n        'Content-Type': 'application/json', // JSON 형식으로 데이터 전송\r\n      },\r\n      body: JSON.stringify(loginData), // 로그인 데이터를 JSON으로 변환하여 전송\r\n    })\r\n      .then(response => {\r\n        if (response.ok) { // 서버가 200 OK 응답을 보낸 경우\r\n          if (response.headers.get('content-length') === '0') {\r\n            // 서버에서 응답 데이터가 없을 경우, 간단히 로그인 상태로 설정\r\n            setUser({ loggedIn: true });\r\n          } else {\r\n            return response.json(); // 서버에서 응답 데이터가 있는 경우 JSON으로 파싱\r\n          }\r\n          navigate('/'); // 로그인 성공 시 메인 페이지로 이동\r\n        } else {\r\n          setError('로그인에 실패했습니다. 다시 시도해 주세요.'); // 로그인 실패 시 에러 메시지 설정\r\n          throw new Error('Login failed'); // 에러를 발생시켜 catch 블록으로 이동\r\n        }\r\n      })\r\n      .then(data => {\r\n        if (data) {\r\n          setUser(data); // 유저 정보를 상태에 설정\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error logging in:', error); // 콘솔에 에러 출력\r\n        setError('서버 오류가 발생했습니다. 나중에 다시 시도해 주세요.'); // 서버 오류 발생 시 에러 메시지 설정\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <form onSubmit={handleLogin} className=\"login-form\">\r\n        <h2>로그인</h2>\r\n        {error && <p className=\"error-message\">{error}</p>} {/* 에러 메시지 표시 */}\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"이메일\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)} // 이메일 입력 시 상태 업데이트\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)} // 비밀번호 입력 시 상태 업데이트\r\n          required\r\n        />\r\n        <button type=\"submit\">로그인</button> {/* 로그인 버튼 */}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport '../style/FreeBoard.css';\r\nimport { API_BASE_URL } from '../config';\r\n\r\nconst FreeBoard = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const { boardId } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts?size=20&page=1`)\r\n      .then(response => response.json())\r\n      .then(data => setPosts(data.results || []))\r\n      .catch(error => console.error('Error fetching posts:', error));\r\n  }, [boardId]);\r\n\r\n  const handleViewPost = (postId) => {\r\n    navigate(`/boards/${boardId}/posts/${postId}`);\r\n  };\r\n\r\n  const handleCreatePost = () => {\r\n    navigate(`/boards/${boardId}/new-post`);\r\n  };\r\n\r\n  const handleDeletePost = (postId) => {\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ postId }),\r\n    })\r\n      .then(() => {\r\n        setPosts(posts.filter(post => post.pId !== postId));\r\n      })\r\n      .catch(error => console.error('Error deleting post:', error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"freeboard-container\">\r\n      <h2>자유게시판</h2>\r\n      {posts.length > 0 ? (\r\n        <div className=\"post-list\">\r\n          {posts.map(post => (\r\n            <div key={post.pId} className=\"post-item\" onClick={() => handleViewPost(post.pId)}>\r\n              <div className=\"post-info\">\r\n                <h3 className=\"post-title\">{post.title}</h3>\r\n                <div className=\"post-meta\">\r\n                  <span className=\"post-author\">작성자: {post.writer}</span>\r\n                  <span className=\"post-views\">조회수: {post.views}</span>\r\n                  <span className=\"post-date\">작성일: {post.created_at}</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"post-actions\">\r\n                <button className=\"view-button\">보기</button>\r\n                <button className=\"delete-button\" onClick={(e) => {e.stopPropagation(); handleDeletePost(post.pId)}}>삭제</button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <p>게시글이 없습니다. 글쓰기를 통해 새 게시글을 작성해보세요.</p>\r\n      )}\r\n      <button className=\"create-post-button\" onClick={handleCreatePost}>글쓰기</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FreeBoard;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport '../style/NewPost.css';\r\nimport { API_BASE_URL } from '../config';\r\n\r\n\r\nconst NewPost = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const { boardId } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const newPost = {\r\n      title,\r\n      content,\r\n      bId: boardId, // 게시판 ID 포함\r\n    };\r\n\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(newPost),\r\n    })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Failed to create post');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(() => {\r\n        navigate(`/boards/${boardId}`);\r\n      })\r\n      .catch(error => console.error('Error creating post:', error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"new-post-container\">\r\n      <h2>새 글 작성</h2>\r\n      <form onSubmit={handleSubmit} className=\"new-post-form\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"제목\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          required\r\n        />\r\n        <textarea\r\n          placeholder=\"내용\"\r\n          value={content}\r\n          onChange={(e) => setContent(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\" className=\"submit-button\">작성</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPost;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport '../style/PostDetail.css';\r\nimport { API_BASE_URL } from '../config';\r\n\r\n\r\n\r\nconst PostDetail = () => {\r\n  const { boardId, postId } = useParams();\r\n  const [post, setPost] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  // 게시물 단건 조회\r\n  useEffect(() => {\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts/${postId}`)\r\n      .then(response => response.json())\r\n      .then(data => setPost(data))\r\n      .catch(error => console.error('Error fetching post:', error));\r\n  }, [boardId, postId]);\r\n\r\n  // 게시글 삭제\r\n  const handleDeletePost = () => {\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ postId }),\r\n    })\r\n      .then(() => {\r\n        navigate(`/boards/${boardId}`);\r\n      })\r\n      .catch(error => console.error('Error deleting post:', error));\r\n  };\r\n\r\n  // 게시글 수정 페이지로 이동\r\n  const handleEditPost = () => {\r\n    navigate(`/boards/${boardId}/posts/${postId}/edit`);\r\n  };\r\n\r\n  if (!post) return <div>Loading...</div>;\r\n\r\n  return (\r\n    <div className=\"post-detail-container\">\r\n      <h2>{post.title}</h2>\r\n      <p className=\"post-content\">{post.content}</p>\r\n      <div className=\"post-meta\">\r\n        <span>작성자: {post.writer}</span>\r\n        <span>작성일: {post.created_at}</span>\r\n        <span>조회수: {post.views}</span>\r\n      </div>\r\n      <button onClick={handleEditPost}>수정</button>\r\n      <button onClick={handleDeletePost}>삭제</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostDetail;\r\n","import React, { createContext, useState, useContext } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  const login = (userData) => {\r\n    setUser(userData);\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n","import React from 'react';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport '../style/ProfilePage.css';\r\nimport { API_BASE_URL } from '../config';\r\n\r\nconst ProfilePage = () => {\r\n  const { user } = useAuth();\r\n\r\n  return (\r\n    <div className=\"profile-container\">\r\n      <h2>내 정보</h2>\r\n      {user ? (\r\n        <div className=\"profile-details\">\r\n          <p><strong>Username:</strong> {user.username}</p>\r\n          <p><strong>Name:</strong> {user.name}</p>\r\n        </div>\r\n      ) : (\r\n        <p>로그인되지 않았습니다.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../style/SignupPage.css';\r\nimport { API_BASE_URL } from '../config';\r\n\r\n\r\nconst SignupPage = () => {\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [nickname, setNickname] = useState('');\r\n  const [error, setError] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleSignup = (e) => {\r\n    e.preventDefault();\r\n    if (password !== confirmPassword) {\r\n      setError('비밀번호가 일치하지 않습니다.');\r\n      return;\r\n    }\r\n  \r\n    const signupData = {\r\n      name,\r\n      email,\r\n      password,\r\n      nickname,\r\n    };\r\n  \r\n    fetch(`${API_BASE_URL}/signup`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(signupData),\r\n    })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('회원가입 요청이 실패했습니다.');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        // API 명세서에 따라 'success' 필드 대신 200 OK로 판단\r\n        navigate('/login'); // 회원가입 성공 시 로그인 페이지로 이동\r\n      })\r\n      .catch(error => {\r\n        console.error('Error signing up:', error);\r\n        setError('서버 오류가 발생했습니다. 나중에 다시 시도해 주세요.');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"signup-container\">\r\n      <h2>회원가입</h2>\r\n      <form onSubmit={handleSignup} className=\"signup-form\">\r\n        {error && <p className=\"error-message\">{error}</p>}\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"이름\"\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"닉네임\"\r\n          value={nickname}\r\n          onChange={(e) => setNickname(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"이메일\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"비밀번호 확인\"\r\n          value={confirmPassword}\r\n          onChange={(e) => setConfirmPassword(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\" className=\"signup-button\">회원가입</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignupPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../style/Playground.css';\r\nimport { API_BASE_URL } from '../config';\r\n\r\n\r\n\r\nconst Playground = () => {\r\n  const [boards, setBoards] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    fetch(`${API_BASE_URL}/boards`)\r\n      .then(response => response.json())\r\n      .then(data => setBoards(data))\r\n      .catch(error => console.error('Error fetching boards:', error));\r\n  }, []);\r\n\r\n  const handleCreateBoard = () => {\r\n    navigate('/create-board');\r\n  };\r\n\r\n  const handleBoardClick = (boardId) => {\r\n    navigate(`/boards/${boardId}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"playground-container\">\r\n      <h2>놀이터</h2>\r\n      <div className=\"boards-list\">\r\n        {boards.length > 0 ? (\r\n          boards.map(board => (\r\n            <div \r\n              key={board.bId} \r\n              className=\"board-item\" \r\n              onClick={() => handleBoardClick(board.bId)}\r\n            >\r\n              <h3>{board.title}</h3>\r\n              <p>{board.description}</p>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>게시판이 없습니다. 새로운 게시판을 생성해보세요!</p>\r\n        )}\r\n      </div>\r\n      <button className=\"create-board-button\" onClick={handleCreateBoard}>게시판 생성</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Playground;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../style/CreateBoard.css';\r\nimport { API_BASE_URL } from '../config';\r\n\r\nconst CreateBoard = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [error, setError] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleCreateBoard = (e) => {\r\n    e.preventDefault();\r\n\r\n    const newBoard = {\r\n      title,\r\n      description,\r\n    };\r\n\r\n    fetch(`${API_BASE_URL}/boards`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(newBoard),\r\n    })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('게시판 생성에 실패했습니다.');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(() => {\r\n        navigate('/playground'); // 생성 후 놀이터 페이지로 이동\r\n      })\r\n      .catch(error => {\r\n        console.error('Error creating board:', error);\r\n        setError('서버 오류가 발생했습니다. 나중에 다시 시도해 주세요.');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"create-board-container\">\r\n      <h2>게시판 생성</h2>\r\n      <form onSubmit={handleCreateBoard} className=\"create-board-form\">\r\n        {error && <p className=\"error-message\">{error}</p>}\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"게시판 제목\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          required\r\n        />\r\n        <textarea\r\n          placeholder=\"게시판 설명\"\r\n          value={description}\r\n          onChange={(e) => setDescription(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\" className=\"create-button\">생성</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateBoard;\r\n","import React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\nimport Header from './components/Header';\r\nimport Home from './pages/Home';\r\nimport About from './pages/About';\r\nimport LoginPage from './pages/LoginPage';\r\nimport FreeBoard from './pages/FreeBoard';\r\nimport NewPost from './pages/NewPost';\r\nimport PostDetail from './pages/PostDetail';\r\nimport ProfilePage from './pages/ProfilePage';\r\nimport SignupPage from './pages/SignupPage';\r\nimport Playground from './pages/Playground'; // 놀이터 페이지 추가\r\nimport CreateBoard from './pages/CreateBoard'; // 게시판 생성 페이지 추가\r\n\r\nconst App = () => {\r\n  const [user, setUser] = useState(null); // 전역으로 로그인 상태 관리\r\n\r\n  return (\r\n    <Router>\r\n      <Header user={user} setUser={setUser} />\r\n      <Routes>\r\n        <Route path=\"/\" element={<Home />} />\r\n        <Route path=\"/about\" element={<About />} />\r\n        <Route path=\"/login\" element={<LoginPage setUser={setUser} />} /> {/* setUser 전달 */}\r\n        <Route path=\"/signup\" element={<SignupPage />} />\r\n        <Route path=\"/freeboard\" element={<FreeBoard />} />\r\n        <Route path=\"/profile\" element={<ProfilePage />} />\r\n        \r\n        {/* 게시판 관련 라우트 */}\r\n        <Route path=\"/boards/:boardId\" element={<FreeBoard />} />\r\n        <Route path=\"/boards/:boardId/new-post\" element={<NewPost />} />\r\n        <Route path=\"/boards/:boardId/posts/:postId\" element={<PostDetail />} />\r\n        <Route path=\"/boards/:boardId/posts/:postId/edit\" element={<NewPost />} /> {/* 수정 시 NewPost 재사용 */}\r\n        \r\n        {/* 놀이터 및 게시판 생성 관련 라우트 */}\r\n        <Route path=\"/playground\" element={<Playground />} />\r\n        <Route path=\"/create-board\" element={<CreateBoard />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { AuthProvider } from './context/AuthContext';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  //<React.StrictMode>\r\n    <AuthProvider>\r\n      <App />\r\n    </AuthProvider>\r\n  //</React.StrictMode>\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}