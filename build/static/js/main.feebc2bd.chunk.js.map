{"version":3,"sources":["components/Header.js","components/MainContent.js","pages/Home.js","pages/About.js","pages/LoginPage.js","pages/FreeBoard.js","pages/NewPost.js","pages/PostDetail.js","context/AuthContext.js","pages/ProfilePage.js","pages/SignupPage.js","App.js","reportWebVitals.js","index.js"],"names":["Header","user","setUser","useState","navigate","useNavigate","useEffect","sessionId","Cookies","get","React","createElement","className","onClick","handleProfile","handleSignup","handleLogout","remove","MainContent","alert","Home","About","LoginPage","_ref","email","setEmail","password","setPassword","error","setError","onSubmit","e","preventDefault","loginData","fetch","method","headers","Content-Type","body","JSON","stringify","credentials","then","response","ok","catch","console","type","placeholder","value","onChange","target","required","FreeBoard","posts","setPosts","boardId","useParams","json","data","results","length","map","post","key","pid","postId","handleViewPost","title","writer","views","handleUpdatePost","Error","filter","handleDeletePost","handleCreatePost","NewPost","setTitle","content","setContent","newPost","bId","PostDetail","setPost","comments","setComments","newComment","setNewComment","author","comment","id","createdAt","commentId","handleDeleteComment","rows","trim","commentData","AuthContext","createContext","AuthProvider","children","Provider","login","userData","logout","ProfilePage","useContext","username","name","SignupPage","setName","confirmPassword","setConfirmPassword","nickname","setNickname","signupData","log","success","App","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.feebc2bd.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Cookies from 'js-cookie';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n  const [user, setUser] = useState(null); // 로그인 상태를 관리할 state\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // 쿠키에서 세션 ID 또는 토큰을 가져옴\r\n    const sessionId = Cookies.get('sessionId'); // 예: 쿠키 이름이 'sessionId'인 경우\r\n    if (sessionId) {\r\n      // 세션 ID가 존재하면 로그인된 상태로 간주\r\n      setUser({ sessionId }); // 사용자 정보를 가져올 수 있다면 더 정확하게 설정 가능\r\n    } else {\r\n      setUser(null);\r\n    }\r\n  }, []);\r\n\r\n  const handleLogout = () => {\r\n    // 쿠키에서 세션 ID 삭제\r\n    Cookies.remove('sessionId'); // 예: 쿠키 이름이 'sessionId'인 경우\r\n    setUser(null); // 로그아웃 시 user 상태를 null로 설정\r\n    navigate('/'); // 로그아웃 후 메인 페이지로 이동\r\n  };\r\n\r\n  const handleProfile = () => {\r\n    if (user) {\r\n      navigate('/profile');\r\n    } else {\r\n      navigate('/login');\r\n    }\r\n  };\r\n\r\n  const handleSignup = () => {\r\n    navigate('/signup');\r\n  };\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"header-left\">\r\n        <h1 onClick={() => navigate('/')}>Jootcamp</h1>\r\n        <nav className=\"nav\">\r\n          <ul>\r\n            <li><button onClick={() => navigate('/freeboard')}>자유게시판</button></li>\r\n            <li><button onClick={() => navigate('/mypaths')}>My Paths</button></li>\r\n            <li><button onClick={() => navigate('/mytracks')}>My Tracks</button></li>\r\n            <li><button onClick={() => navigate('/myactivities')}>My Activities</button></li>\r\n            <li><button onClick={() => navigate('/teams')}>Teams</button></li>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n      <div className=\"header-right\">\r\n        <button className=\"info-button\" onClick={handleProfile}>\r\n          {user ? '내 정보' : 'Login'}\r\n        </button>\r\n        {!user && (\r\n          <button className=\"signup-button\" onClick={handleSignup}>\r\n            회원가입\r\n          </button>\r\n        )}\r\n        {user && (\r\n          <button className=\"login-button\" onClick={handleLogout}>\r\n            Logout\r\n          </button>\r\n        )}\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './MainContent.css';\r\n\r\nconst MainContent = () => {\r\n  return (\r\n    <main className=\"main-content\">\r\n      <h2>Welcome to Jootcamp</h2>\r\n      <nav className=\"content-nav\">\r\n        <button onClick={() => alert('All Content clicked')}>All Content</button>\r\n        <button onClick={() => alert('Announcements clicked')}>Announcements</button>\r\n        <button onClick={() => alert('My Information clicked')}>My Information</button>\r\n      </nav>\r\n      <div className=\"content-sections\">\r\n        {/* Your sections go here */}\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default MainContent;\r\n","import React from 'react';\r\nimport MainContent from '../components/MainContent';\r\nimport './Home.css';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"home\">\r\n      <MainContent />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nconst About = () => {\r\n  return (\r\n    <div>\r\n      <h2>About Jootcamp</h2>\r\n      <p>Jootcamp is a platform for coders to share knowledge and learn together.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Cookies from 'js-cookie';\r\nimport './LoginPage.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';\r\n\r\nconst LoginPage = ({ setUser }) => { // setUser를 props로 받아서 사용\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n\r\n    const loginData = {\r\n      email,\r\n      password,\r\n    };\r\n\r\n    fetch(`${API_BASE_URL}/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(loginData),\r\n      credentials: 'include', // 쿠키를 포함하여 요청\r\n    })\r\n      .then(response => {\r\n        if (response.ok) {\r\n          // 로그인 성공 시, 쿠키에서 세션 ID를 가져와서 setUser 호출\r\n          const sessionId = Cookies.get('sessionId');\r\n          if (sessionId) {\r\n            setUser({ sessionId }); // 로그인된 사용자 정보 설정\r\n          }\r\n          navigate('/'); // 메인 페이지로 이동\r\n        } else {\r\n          setError('로그인에 실패했습니다. 다시 시도해 주세요.');\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error logging in:', error);\r\n        setError('서버 오류가 발생했습니다. 나중에 다시 시도해 주세요.');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <form onSubmit={handleLogin} className=\"login-form\">\r\n        <h2>로그인</h2>\r\n        {error && <p className=\"error-message\">{error}</p>} {/* 오류 메시지 표시 */}\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"이메일\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\">로그인</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport './FreeBoard.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';\r\n\r\nconst FreeBoard = () => {\r\n  const [posts, setPosts] = useState([]); // 게시글 데이터를 관리할 상태\r\n  const { boardId } = useParams(); // 현재 게시판 ID 가져오기\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // 특정 게시판의 게시글 목록 조회\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        if (data.results) {\r\n          setPosts(data.results); // 명세서에 따라 results 배열을 사용\r\n        }\r\n      })\r\n      .catch(error => console.error('Error fetching posts:', error));\r\n  }, [boardId]);\r\n\r\n  const handleCreatePost = () => {\r\n    navigate(`/boards/${boardId}/new-post`);\r\n  };\r\n\r\n  const handleViewPost = (postId) => {\r\n    navigate(`/boards/${boardId}/posts/${postId}`);\r\n  };\r\n\r\n  const handleUpdatePost = (postId) => {\r\n    navigate(`/boards/${boardId}/posts/${postId}/edit`);\r\n  };\r\n\r\n  const handleDeletePost = (postId) => {\r\n    // 게시글 삭제 요청\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ postId }), // 명세서에 따라 postId를 body에 포함\r\n    })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Failed to delete post');\r\n        }\r\n        // 게시글 목록에서 삭제된 게시글 제거\r\n        setPosts(posts.filter(post => post.pid !== postId));\r\n      })\r\n      .catch(error => console.error('Error deleting post:', error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"freeboard-container\">\r\n      <h2>자유게시판</h2>\r\n      {posts.length > 0 ? (\r\n        <div className=\"post-list\">\r\n          {posts.map(post => (\r\n            <div key={post.pid} className=\"post-item\">\r\n              <div className=\"post-info\">\r\n                <h3 className=\"post-title\" onClick={() => handleViewPost(post.pid)}>{post.title}</h3>\r\n                <div className=\"post-meta\">\r\n                  <span className=\"post-author\">작성자: {post.writer}</span>\r\n                  <span className=\"post-views\">조회수: {post.views}</span>\r\n                  <button onClick={() => handleUpdatePost(post.pid)}>수정</button>\r\n                  <button onClick={() => handleDeletePost(post.pid)}>삭제</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <p>게시글이 없습니다. 글쓰기를 통해 새 게시글을 작성해보세요.</p>\r\n      )}\r\n      <button className=\"write-button\" onClick={handleCreatePost}>글쓰기</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FreeBoard;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport './NewPost.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';\r\n\r\nconst NewPost = () => {\r\n  const [title, setTitle] = useState(''); // 제목 상태 관리\r\n  const [content, setContent] = useState(''); // 내용 상태 관리\r\n  const { boardId } = useParams(); // URL에서 boardId를 가져옴\r\n  const navigate = useNavigate(); // 페이지 이동을 위한 훅\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!boardId) {\r\n      console.error('boardId is undefined.');\r\n      return;\r\n    }\r\n\r\n    const newPost = {\r\n      title,\r\n      content,\r\n      bId: boardId, // boardId를 bId로 설정\r\n    };\r\n    \r\n    // API 호출하여 새로운 게시글 생성\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(newPost),\r\n    })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Failed to create post');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(() => {\r\n        navigate(`/boards/${boardId}`); // 성공 시 해당 게시판 페이지로 이동\r\n      })\r\n      .catch(error => console.error('Error creating post:', error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"new-post-container\">\r\n      <h2>새 글 작성</h2>\r\n      <form onSubmit={handleSubmit} className=\"new-post-form\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"제목\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          required\r\n        />\r\n        <textarea\r\n          placeholder=\"내용\"\r\n          value={content}\r\n          onChange={(e) => setContent(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\" className=\"submit-button\">작성</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPost;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport './PostDetail.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';  // API 기본 URL 설정\r\n\r\nconst PostDetail = () => {\r\n  const { boardId, postId } = useParams(); // 게시글의 ID를 URL에서 가져옵니다.\r\n  const navigate = useNavigate();\r\n  const [post, setPost] = useState(null); // 현재 게시글을 저장할 상태입니다.\r\n  const [comments, setComments] = useState([]); // 댓글 목록을 저장할 상태입니다.\r\n  const [newComment, setNewComment] = useState(''); // 새 댓글을 저장할 상태입니다.\r\n\r\n  useEffect(() => {\r\n    // 게시글 조회\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts/${postId}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setPost(data); // 백엔드에서 받은 게시글 데이터를 상태에 저장합니다.\r\n        return fetch(`${API_BASE_URL}/boards/${boardId}/posts/${postId}/comments`);\r\n      })\r\n      .then(response => response.json())\r\n      .then(data => setComments(data)) // 댓글 데이터를 상태에 저장합니다.\r\n      .catch(error => console.error('Error fetching post or comments:', error));\r\n  }, [boardId, postId]);\r\n\r\n  const handleAddComment = (e) => {\r\n    e.preventDefault();\r\n    if (newComment.trim() === '') return;\r\n\r\n    const commentData = {\r\n      content: newComment,\r\n    };\r\n\r\n    // 댓글 작성 API 호출\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts/${postId}/comments`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(commentData),\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setComments([...comments, data]); // 새 댓글을 기존 댓글에 추가\r\n        setNewComment(''); // 입력란 초기화\r\n      })\r\n      .catch(error => console.error('Error adding comment:', error));\r\n  };\r\n\r\n  const handleDeleteComment = (commentId) => {\r\n    // 댓글 삭제 API 호출\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts/${postId}/comments/${commentId}`, {\r\n      method: 'DELETE',\r\n    })\r\n      .then(() => {\r\n        setComments(comments.filter(comment => comment.id !== commentId));\r\n      })\r\n      .catch(error => console.error('Error deleting comment:', error));\r\n  };\r\n\r\n  const handleDeletePost = () => {\r\n    // 게시글 삭제 API 호출\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts/${postId}`, {\r\n      method: 'DELETE',\r\n    })\r\n      .then(() => {\r\n        navigate(`/boards/${boardId}`); // 삭제 후 게시판 페이지로 이동\r\n      })\r\n      .catch(error => console.error('Error deleting post:', error));\r\n  };\r\n\r\n  if (!post) return <div>해당 글을 찾을 수 없습니다.</div>;\r\n\r\n  return (\r\n    <div className=\"post-detail-container\">\r\n      <h2>{post.title}</h2>\r\n      <p className=\"post-content\">{post.content}</p>\r\n      <div className=\"post-meta\">\r\n        <span>작성자: {post.author}</span>\r\n        <span>조회수: {post.views}</span>\r\n      </div>\r\n      <button className=\"delete-post-button\" onClick={handleDeletePost}>글 삭제</button>\r\n\r\n      <div className=\"comments-section\">\r\n        <h3>댓글</h3>\r\n        {comments.length > 0 ? (\r\n          <ul className=\"comments-list\">\r\n            {comments.map((comment) => (\r\n              <li key={comment.id} className=\"comment-item\">\r\n                <span className=\"comment-date\">{comment.createdAt}</span>\r\n                <p className=\"comment-content\">{comment.content}</p>\r\n                <button className=\"delete-comment-button\" onClick={() => handleDeleteComment(comment.id)}>댓글 삭제</button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        ) : (\r\n          <p>아직 댓글이 없습니다. 첫 댓글을 남겨보세요!</p>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"comment-form\">\r\n        <textarea\r\n          placeholder=\"댓글을 작성하세요...\"\r\n          value={newComment}\r\n          onChange={(e) => setNewComment(e.target.value)}\r\n          rows=\"4\"\r\n        />\r\n        <button onClick={handleAddComment}>댓글 작성</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostDetail;\r\n","import React, { createContext, useState, useContext } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  const login = (userData) => {\r\n    setUser(userData);\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n","import React from 'react';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport './ProfilePage.css';\r\n\r\nconst ProfilePage = () => {\r\n  const { user } = useAuth();\r\n\r\n  return (\r\n    <div className=\"profile-container\">\r\n      <h2>내 정보</h2>\r\n      {user ? (\r\n        <div className=\"profile-details\">\r\n          <p><strong>Username:</strong> {user.username}</p>\r\n          <p><strong>Name:</strong> {user.name}</p>\r\n        </div>\r\n      ) : (\r\n        <p>로그인되지 않았습니다.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './SignupPage.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';\r\n\r\nconst SignupPage = () => {\r\n  const [name, setName] = useState(''); // 사용자 이름\r\n  const [email, setEmail] = useState(''); // 이메일\r\n  const [password, setPassword] = useState(''); // 비밀번호\r\n  const [confirmPassword, setConfirmPassword] = useState(''); // 비밀번호 확인\r\n  const [nickname, setNickname] = useState(''); // 닉네임\r\n  const [error, setError] = useState(''); // 오류 메시지\r\n  const navigate = useNavigate();\r\n\r\n  const handleSignup = (e) => {\r\n    e.preventDefault();\r\n    if (password !== confirmPassword) {\r\n      setError('비밀번호가 일치하지 않습니다.');\r\n      return;\r\n    }\r\n  \r\n    const signupData = {\r\n      name,        // 이름\r\n      email,       // 이메일\r\n      password,    // 비밀번호\r\n      nickname,    // 닉네임\r\n    };\r\n  \r\n    console.log('Signup Data:', signupData); // 전송될 데이터를 콘솔에 출력\r\n  \r\n    fetch(`${API_BASE_URL}/signup`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(signupData),\r\n    })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('회원가입 요청이 실패했습니다.');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        if (data.success) {\r\n          navigate('/login'); // 회원가입 성공 시 로그인 페이지로 이동\r\n        } else {\r\n          setError('회원가입에 실패했습니다. 다시 시도해 주세요.');\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error signing up:', error);\r\n        setError('서버 오류가 발생했습니다. 나중에 다시 시도해 주세요.');\r\n      });\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"signup-container\">\r\n      <h2>회원가입</h2>\r\n      <form onSubmit={handleSignup} className=\"signup-form\">\r\n        {error && <p className=\"error-message\">{error}</p>} {/* 오류 메시지 표시 */}\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"이름\"\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"닉네임\"\r\n          value={nickname}\r\n          onChange={(e) => setNickname(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"이메일\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"비밀번호 확인\"\r\n          value={confirmPassword}\r\n          onChange={(e) => setConfirmPassword(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\" className=\"signup-button\">회원가입</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignupPage;\r\n","import React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\nimport Header from './components/Header';\r\nimport Home from './pages/Home';\r\nimport About from './pages/About';\r\nimport LoginPage from './pages/LoginPage';\r\nimport FreeBoard from './pages/FreeBoard';\r\nimport NewPost from './pages/NewPost';\r\nimport PostDetail from './pages/PostDetail';\r\nimport ProfilePage from './pages/ProfilePage';\r\nimport SignupPage from './pages/SignupPage';\r\n\r\nconst App = () => {\r\n  const [user, setUser] = useState(null); // 로그인 상태를 관리하는 state\r\n\r\n  return (\r\n    <Router>\r\n      {/* Header에 user와 setUser를 전달하여 상태를 관리 */}\r\n      <Header user={user} setUser={setUser} />\r\n      <Routes>\r\n        <Route path=\"/\" element={<Home />} />\r\n        <Route path=\"/about\" element={<About />} />\r\n        <Route path=\"/login\" element={<LoginPage setUser={setUser} />} />\r\n        <Route path=\"/signup\" element={<SignupPage />} />\r\n        <Route path=\"/freeboard\" element={<FreeBoard />} />\r\n        <Route path=\"/profile\" element={<ProfilePage />} />\r\n        \r\n        {/* 게시판 관련 라우트 */}\r\n        <Route path=\"/boards/:boardId\" element={<FreeBoard />} />\r\n        <Route path=\"/boards/:boardId/new-post\" element={<NewPost />} />\r\n        <Route path=\"/boards/:boardId/posts/:postId\" element={<PostDetail />} />\r\n        <Route path=\"/boards/:boardId/posts/:postId/edit\" element={<NewPost />} /> {/* 수정 시 NewPost 재사용 */}\r\n      </Routes>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { AuthProvider } from './context/AuthContext';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  //<React.StrictMode>\r\n    <AuthProvider>\r\n      <App />\r\n    </AuthProvider>\r\n  //</React.StrictMode>\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}