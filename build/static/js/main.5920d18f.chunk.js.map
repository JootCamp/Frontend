{"version":3,"sources":["components/Header.js","components/MainContent.js","pages/Home.js","pages/About.js","pages/LoginPage.js","pages/FreeBoard.js","pages/NewPost.js","pages/PostDetail.js","context/AuthContext.js","pages/ProfilePage.js","pages/SignupPage.js","pages/Playground.js","pages/CreateBoard.js","App.js","reportWebVitals.js","index.js"],"names":["Header","_ref","user","setUser","navigate","useNavigate","React","createElement","className","onClick","handleProfile","handleSignup","handleLogout","MainContent","alert","Home","About","LoginPage","email","setEmail","useState","password","setPassword","error","setError","onSubmit","e","preventDefault","loginData","fetch","method","headers","Content-Type","body","JSON","stringify","then","response","ok","Error","console","log","get","json","loggedIn","data","catch","type","placeholder","value","onChange","target","required","FreeBoard","posts","setPosts","boardId","useParams","useEffect","results","handleViewPost","postId","length","map","post","key","pId","title","writer","views","created_at","filter","handleDeletePost","handleCreatePost","NewPost","setTitle","content","setContent","newPost","bId","PostDetail","setPost","handleEditPost","AuthContext","createContext","AuthProvider","children","Provider","login","userData","logout","ProfilePage","useContext","username","name","SignupPage","setName","confirmPassword","setConfirmPassword","nickname","setNickname","signupData","success","Playground","boards","setBoards","board","handleBoardClick","description","handleCreateBoard","CreateBoard","setDescription","newBoard","App","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.5920d18f.chunk.js","sourcesContent":["// src/components/Header.js\r\nimport React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './Header.css';\r\n\r\nconst Header = ({ user, setUser }) => {\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogout = () => {\r\n    setUser(null);\r\n    navigate('/');\r\n  };\r\n\r\n  const handleProfile = () => {\r\n    if (user) {\r\n      navigate('/profile');\r\n    } else {\r\n      navigate('/login');\r\n    }\r\n  };\r\n\r\n  const handleSignup = () => {\r\n    navigate('/signup');\r\n  };\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"header-left\">\r\n        <h1 onClick={() => navigate('/')}>Jootcamp</h1>\r\n        <nav className=\"nav\">\r\n          <ul>\r\n            <li><button onClick={() => navigate('/freeboard')}>자유게시판</button></li>\r\n            <li><button onClick={() => navigate('/playground')}>놀이터</button></li> {/* 놀이터 추가 */}\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n      <div className=\"header-right\">\r\n        <button className=\"info-button\" onClick={handleProfile}>\r\n          {user ? '내 정보' : 'Login'}\r\n        </button>\r\n        {!user && (\r\n          <button className=\"signup-button\" onClick={handleSignup}>\r\n            회원가입\r\n          </button>\r\n        )}\r\n        {user && (\r\n          <button className=\"login-button\" onClick={handleLogout}>\r\n            Logout\r\n          </button>\r\n        )}\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './MainContent.css';\r\n\r\nconst MainContent = () => {\r\n  return (\r\n    <main className=\"main-content\">\r\n      <h2>Welcome to Jootcamp</h2>\r\n      <nav className=\"content-nav\">\r\n        <button onClick={() => alert('All Content clicked')}>All Content</button>\r\n        <button onClick={() => alert('Announcements clicked')}>Announcements</button>\r\n        <button onClick={() => alert('My Information clicked')}>My Information</button>\r\n      </nav>\r\n      <div className=\"content-sections\">\r\n        {/* Your sections go here */}\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default MainContent;\r\n","import React from 'react';\r\nimport MainContent from '../components/MainContent';\r\nimport './Home.css';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"home\">\r\n      <MainContent />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nconst About = () => {\r\n  return (\r\n    <div>\r\n      <h2>About Jootcamp</h2>\r\n      <p>Jootcamp is a platform for coders to share knowledge and learn together.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './LoginPage.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';\r\n\r\nconst LoginPage = ({ setUser }) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n\r\n    const loginData = {\r\n      email,\r\n      password,\r\n    };\r\n\r\n    fetch(`${API_BASE_URL}/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(loginData),\r\n    })\r\n      .then(response => {\r\n        if (response.ok) {\r\n          console.log('Login successful');\r\n          // 서버에서 JSON 응답이 없는 경우 처리\r\n          if (response.headers.get('content-length') === '0') {\r\n            setUser({ loggedIn: true }); // 사용자 상태를 간단히 loggedIn: true로 설정\r\n          } else {\r\n            return response.json(); // 응답이 JSON인 경우에만 파싱\r\n          }\r\n          navigate('/'); // 메인 페이지로 이동\r\n        } else {\r\n          setError('로그인에 실패했습니다. 다시 시도해 주세요.');\r\n          throw new Error('Login failed');\r\n        }\r\n      })\r\n      .then(data => {\r\n        if (data) {\r\n          console.log('User data received:', data);\r\n          setUser(data); // 서버에서 받은 유저 정보를 설정\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error logging in:', error);\r\n        setError('서버 오류가 발생했습니다. 나중에 다시 시도해 주세요.');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <form onSubmit={handleLogin} className=\"login-form\">\r\n        <h2>로그인</h2>\r\n        {error && <p className=\"error-message\">{error}</p>} {/* 오류 메시지 표시 */}\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"이메일\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\">로그인</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport './FreeBoard.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';\r\n\r\nconst FreeBoard = () => {\r\n  const [posts, setPosts] = useState([]); // 게시글 데이터를 관리할 상태\r\n  const { boardId } = useParams(); // 현재 게시판 ID 가져오기\r\n  const navigate = useNavigate();\r\n\r\n  // 게시글 목록 조회\r\n  useEffect(() => {\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts?size=20&page=1`)\r\n      .then(response => response.json())\r\n      .then(data => setPosts(data.results))\r\n      .catch(error => console.error('Error fetching posts:', error));\r\n  }, [boardId]);\r\n\r\n  // 게시글 클릭 시 게시글 상세 페이지로 이동\r\n  const handleViewPost = (postId) => {\r\n    navigate(`/boards/${boardId}/posts/${postId}`);\r\n  };\r\n\r\n  // 게시글 작성 페이지로 이동\r\n  const handleCreatePost = () => {\r\n    navigate(`/boards/${boardId}/new-post`);\r\n  };\r\n\r\n  // 게시글 삭제\r\n  const handleDeletePost = (postId) => {\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ postId }),\r\n    })\r\n      .then(() => {\r\n        setPosts(posts.filter(post => post.pId !== postId));\r\n      })\r\n      .catch(error => console.error('Error deleting post:', error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"freeboard-container\">\r\n      <h2>자유게시판</h2>\r\n      {posts.length > 0 ? (\r\n        <div className=\"post-list\">\r\n          {posts.map(post => (\r\n            <div key={post.pId} className=\"post-item\">\r\n              <div className=\"post-info\" onClick={() => handleViewPost(post.pId)}>\r\n                <h3 className=\"post-title\">{post.title}</h3>\r\n                <div className=\"post-meta\">\r\n                  <span className=\"post-author\">작성자: {post.writer}</span>\r\n                  <span className=\"post-views\">조회수: {post.views}</span>\r\n                  <span className=\"post-date\">작성일: {post.created_at}</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"post-actions\">\r\n                <button onClick={() => handleViewPost(post.pId)}>보기</button>\r\n                <button onClick={() => handleDeletePost(post.pId)}>삭제</button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <p>게시글이 없습니다. 글쓰기를 통해 새 게시글을 작성해보세요.</p>\r\n      )}\r\n      <button className=\"create-post-button\" onClick={handleCreatePost}>글쓰기</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FreeBoard;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport './NewPost.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';\r\n\r\nconst NewPost = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const { boardId } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const newPost = {\r\n      title,\r\n      content,\r\n      bId: boardId, // 게시판 ID 포함\r\n    };\r\n\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(newPost),\r\n    })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Failed to create post');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(() => {\r\n        navigate(`/boards/${boardId}`);\r\n      })\r\n      .catch(error => console.error('Error creating post:', error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"new-post-container\">\r\n      <h2>새 글 작성</h2>\r\n      <form onSubmit={handleSubmit} className=\"new-post-form\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"제목\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          required\r\n        />\r\n        <textarea\r\n          placeholder=\"내용\"\r\n          value={content}\r\n          onChange={(e) => setContent(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\" className=\"submit-button\">작성</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPost;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport './PostDetail.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';\r\n\r\nconst PostDetail = () => {\r\n  const { boardId, postId } = useParams();\r\n  const [post, setPost] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  // 게시물 단건 조회\r\n  useEffect(() => {\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts/${postId}`)\r\n      .then(response => response.json())\r\n      .then(data => setPost(data))\r\n      .catch(error => console.error('Error fetching post:', error));\r\n  }, [boardId, postId]);\r\n\r\n  // 게시글 삭제\r\n  const handleDeletePost = () => {\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ postId }),\r\n    })\r\n      .then(() => {\r\n        navigate(`/boards/${boardId}`);\r\n      })\r\n      .catch(error => console.error('Error deleting post:', error));\r\n  };\r\n\r\n  // 게시글 수정 페이지로 이동\r\n  const handleEditPost = () => {\r\n    navigate(`/boards/${boardId}/posts/${postId}/edit`);\r\n  };\r\n\r\n  if (!post) return <div>Loading...</div>;\r\n\r\n  return (\r\n    <div className=\"post-detail-container\">\r\n      <h2>{post.title}</h2>\r\n      <p className=\"post-content\">{post.content}</p>\r\n      <div className=\"post-meta\">\r\n        <span>작성자: {post.writer}</span>\r\n        <span>작성일: {post.created_at}</span>\r\n        <span>조회수: {post.views}</span>\r\n      </div>\r\n      <button onClick={handleEditPost}>수정</button>\r\n      <button onClick={handleDeletePost}>삭제</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostDetail;\r\n","import React, { createContext, useState, useContext } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  const login = (userData) => {\r\n    setUser(userData);\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n","import React from 'react';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport './ProfilePage.css';\r\n\r\nconst ProfilePage = () => {\r\n  const { user } = useAuth();\r\n\r\n  return (\r\n    <div className=\"profile-container\">\r\n      <h2>내 정보</h2>\r\n      {user ? (\r\n        <div className=\"profile-details\">\r\n          <p><strong>Username:</strong> {user.username}</p>\r\n          <p><strong>Name:</strong> {user.name}</p>\r\n        </div>\r\n      ) : (\r\n        <p>로그인되지 않았습니다.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './SignupPage.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';\r\n\r\nconst SignupPage = () => {\r\n  const [name, setName] = useState(''); // 사용자 이름\r\n  const [email, setEmail] = useState(''); // 이메일\r\n  const [password, setPassword] = useState(''); // 비밀번호\r\n  const [confirmPassword, setConfirmPassword] = useState(''); // 비밀번호 확인\r\n  const [nickname, setNickname] = useState(''); // 닉네임\r\n  const [error, setError] = useState(''); // 오류 메시지\r\n  const navigate = useNavigate();\r\n\r\n  const handleSignup = (e) => {\r\n    e.preventDefault();\r\n    if (password !== confirmPassword) {\r\n      setError('비밀번호가 일치하지 않습니다.');\r\n      return;\r\n    }\r\n  \r\n    const signupData = {\r\n      name,        // 이름\r\n      email,       // 이메일\r\n      password,    // 비밀번호\r\n      nickname,    // 닉네임\r\n    };\r\n  \r\n    console.log('Signup Data:', signupData); // 전송될 데이터를 콘솔에 출력\r\n  \r\n    fetch(`${API_BASE_URL}/signup`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(signupData),\r\n    })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('회원가입 요청이 실패했습니다.');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        if (data.success) {\r\n          navigate('/login'); // 회원가입 성공 시 로그인 페이지로 이동\r\n        } else {\r\n          setError('회원가입에 실패했습니다. 다시 시도해 주세요.');\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error signing up:', error);\r\n        setError('서버 오류가 발생했습니다. 나중에 다시 시도해 주세요.');\r\n      });\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"signup-container\">\r\n      <h2>회원가입</h2>\r\n      <form onSubmit={handleSignup} className=\"signup-form\">\r\n        {error && <p className=\"error-message\">{error}</p>} {/* 오류 메시지 표시 */}\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"이름\"\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"닉네임\"\r\n          value={nickname}\r\n          onChange={(e) => setNickname(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"이메일\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"비밀번호 확인\"\r\n          value={confirmPassword}\r\n          onChange={(e) => setConfirmPassword(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\" className=\"signup-button\">회원가입</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignupPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './Playground.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';\r\n\r\nconst Playground = () => {\r\n  const [boards, setBoards] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    fetch(`${API_BASE_URL}/boards`)\r\n      .then(response => response.json())\r\n      .then(data => setBoards(data))\r\n      .catch(error => console.error('Error fetching boards:', error));\r\n  }, []);\r\n\r\n  const handleCreateBoard = () => {\r\n    navigate('/create-board');\r\n  };\r\n\r\n  const handleBoardClick = (boardId) => {\r\n    navigate(`/boards/${boardId}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"playground-container\">\r\n      <h2>놀이터</h2>\r\n      <div className=\"boards-list\">\r\n        {boards.length > 0 ? (\r\n          boards.map(board => (\r\n            <div \r\n              key={board.bId} \r\n              className=\"board-item\" \r\n              onClick={() => handleBoardClick(board.bId)}\r\n            >\r\n              <h3>{board.title}</h3>\r\n              <p>{board.description}</p>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>게시판이 없습니다. 새로운 게시판을 생성해보세요!</p>\r\n        )}\r\n      </div>\r\n      <button className=\"create-board-button\" onClick={handleCreateBoard}>게시판 생성</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Playground;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './CreateBoard.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';\r\n\r\nconst CreateBoard = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [error, setError] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleCreateBoard = (e) => {\r\n    e.preventDefault();\r\n\r\n    const newBoard = {\r\n      title,\r\n      description,\r\n    };\r\n\r\n    fetch(`${API_BASE_URL}/boards`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(newBoard),\r\n    })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('게시판 생성에 실패했습니다.');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(() => {\r\n        navigate('/playground'); // 생성 후 놀이터 페이지로 이동\r\n      })\r\n      .catch(error => {\r\n        console.error('Error creating board:', error);\r\n        setError('서버 오류가 발생했습니다. 나중에 다시 시도해 주세요.');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"create-board-container\">\r\n      <h2>게시판 생성</h2>\r\n      <form onSubmit={handleCreateBoard} className=\"create-board-form\">\r\n        {error && <p className=\"error-message\">{error}</p>}\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"게시판 제목\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          required\r\n        />\r\n        <textarea\r\n          placeholder=\"게시판 설명\"\r\n          value={description}\r\n          onChange={(e) => setDescription(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\" className=\"create-button\">생성</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateBoard;\r\n","import React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\nimport Header from './components/Header';\r\nimport Home from './pages/Home';\r\nimport About from './pages/About';\r\nimport LoginPage from './pages/LoginPage';\r\nimport FreeBoard from './pages/FreeBoard';\r\nimport NewPost from './pages/NewPost';\r\nimport PostDetail from './pages/PostDetail';\r\nimport ProfilePage from './pages/ProfilePage';\r\nimport SignupPage from './pages/SignupPage';\r\nimport Playground from './pages/Playground'; // 놀이터 페이지 추가\r\nimport CreateBoard from './pages/CreateBoard'; // 게시판 생성 페이지 추가\r\n\r\nconst App = () => {\r\n  const [user, setUser] = useState(null); // 전역으로 로그인 상태 관리\r\n\r\n  return (\r\n    <Router>\r\n      <Header user={user} setUser={setUser} />\r\n      <Routes>\r\n        <Route path=\"/\" element={<Home />} />\r\n        <Route path=\"/about\" element={<About />} />\r\n        <Route path=\"/login\" element={<LoginPage setUser={setUser} />} /> {/* setUser 전달 */}\r\n        <Route path=\"/signup\" element={<SignupPage />} />\r\n        <Route path=\"/freeboard\" element={<FreeBoard />} />\r\n        <Route path=\"/profile\" element={<ProfilePage />} />\r\n        \r\n        {/* 게시판 관련 라우트 */}\r\n        <Route path=\"/boards/:boardId\" element={<FreeBoard />} />\r\n        <Route path=\"/boards/:boardId/new-post\" element={<NewPost />} />\r\n        <Route path=\"/boards/:boardId/posts/:postId\" element={<PostDetail />} />\r\n        <Route path=\"/boards/:boardId/posts/:postId/edit\" element={<NewPost />} /> {/* 수정 시 NewPost 재사용 */}\r\n        \r\n        {/* 놀이터 및 게시판 생성 관련 라우트 */}\r\n        <Route path=\"/playground\" element={<Playground />} />\r\n        <Route path=\"/create-board\" element={<CreateBoard />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { AuthProvider } from './context/AuthContext';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  //<React.StrictMode>\r\n    <AuthProvider>\r\n      <App />\r\n    </AuthProvider>\r\n  //</React.StrictMode>\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}