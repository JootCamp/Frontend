{"version":3,"sources":["components/Header.js","components/MainContent.js","pages/Home.js","pages/About.js","pages/LoginPage.js","pages/FreeBoard.js","pages/NewPost.js","pages/PostDetail.js","context/AuthContext.js","pages/ProfilePage.js","pages/SignupPage.js","App.js","reportWebVitals.js","index.js"],"names":["Header","_ref","user","setUser","navigate","useNavigate","useEffect","console","log","fetch","method","then","response","ok","json","data","isLoggedIn","catch","error","handleProfile","React","createElement","className","onClick","Fragment","handleLogout","handleSignup","MainContent","alert","Home","About","LoginPage","email","setEmail","useState","password","setPassword","setError","onSubmit","e","preventDefault","loginData","headers","Content-Type","body","JSON","stringify","Error","get","loggedIn","type","placeholder","value","onChange","target","required","FreeBoard","posts","setPosts","boardId","useParams","results","length","map","post","key","pid","postId","handleViewPost","title","writer","views","handleUpdatePost","filter","handleDeletePost","handleCreatePost","NewPost","setTitle","content","setContent","newPost","bId","PostDetail","setPost","comments","setComments","newComment","setNewComment","author","comment","id","createdAt","commentId","handleDeleteComment","rows","trim","commentData","AuthContext","createContext","AuthProvider","children","Provider","login","userData","logout","ProfilePage","useContext","username","name","SignupPage","setName","confirmPassword","setConfirmPassword","nickname","setNickname","signupData","success","App","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.39b33698.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './Header.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';\r\n\r\nconst Header = ({ user, setUser }) => {\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    console.log('Header: Checking login status...');\r\n    fetch(`${API_BASE_URL}/isLogin`, {\r\n      method: 'GET',\r\n    })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        console.log('Header: Response OK, assuming user is logged in.');\r\n        return response.json();\r\n      } else {\r\n        console.log('Header: Not logged in.');\r\n        setUser(null);\r\n        return null;\r\n      }\r\n    })\r\n    .then(data => {\r\n      if (data && data.isLoggedIn) {\r\n        console.log('Header: User data:', data.user);\r\n        setUser(data.user); // 서버에서 받은 유저 데이터를 설정합니다.\r\n      } else {\r\n        setUser(null); // 로그인되지 않은 상태로 설정\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error checking login status:', error);\r\n      setUser(null);\r\n    });\r\n  }, [setUser]);\r\n\r\n  const handleLogout = () => {\r\n    console.log('Header: Logging out...');\r\n    fetch(`${API_BASE_URL}/logout`, {\r\n      method: 'POST',\r\n    })\r\n    .then(() => {\r\n      console.log('Header: Logout successful.');\r\n      setUser(null); // 로그아웃 시 user 상태를 null로 설정\r\n      navigate('/');\r\n    })\r\n    .catch(error => {\r\n      console.error('Error logging out:', error);\r\n    });\r\n  };\r\n\r\n  const handleProfile = () => {\r\n    console.log('Header: Profile button clicked.');\r\n    if (user) {\r\n      navigate('/profile');\r\n    } else {\r\n      navigate('/login');\r\n    }\r\n  };\r\n\r\n  const handleSignup = () => {\r\n    console.log('Header: Signup button clicked.');\r\n    navigate('/signup');\r\n  };\r\n\r\n  console.log('Header: Rendering with user state:', user);\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"header-left\">\r\n        <h1 onClick={() => navigate('/')}>Jootcamp</h1>\r\n        <nav className=\"nav\">\r\n          <ul>\r\n            <li><button onClick={() => navigate('/freeboard')}>자유게시판</button></li>\r\n            <li><button onClick={() => navigate('/mypaths')}>My Paths</button></li>\r\n            <li><button onClick={() => navigate('/mytracks')}>My Tracks</button></li>\r\n            <li><button onClick={() => navigate('/myactivities')}>My Activities</button></li>\r\n            <li><button onClick={() => navigate('/teams')}>Teams</button></li>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n      <div className=\"header-right\">\r\n        {user ? (\r\n          <>\r\n            <button className=\"info-button\" onClick={handleProfile}>내 정보</button>\r\n            <button className=\"login-button\" onClick={handleLogout}>Logout</button>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <button className=\"info-button\" onClick={handleProfile}>Login</button>\r\n            <button className=\"signup-button\" onClick={handleSignup}>회원가입</button>\r\n          </>\r\n        )}\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './MainContent.css';\r\n\r\nconst MainContent = () => {\r\n  return (\r\n    <main className=\"main-content\">\r\n      <h2>Welcome to Jootcamp</h2>\r\n      <nav className=\"content-nav\">\r\n        <button onClick={() => alert('All Content clicked')}>All Content</button>\r\n        <button onClick={() => alert('Announcements clicked')}>Announcements</button>\r\n        <button onClick={() => alert('My Information clicked')}>My Information</button>\r\n      </nav>\r\n      <div className=\"content-sections\">\r\n        {/* Your sections go here */}\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default MainContent;\r\n","import React from 'react';\r\nimport MainContent from '../components/MainContent';\r\nimport './Home.css';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"home\">\r\n      <MainContent />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nconst About = () => {\r\n  return (\r\n    <div>\r\n      <h2>About Jootcamp</h2>\r\n      <p>Jootcamp is a platform for coders to share knowledge and learn together.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './LoginPage.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';\r\n\r\nconst LoginPage = ({ setUser }) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n\r\n    const loginData = {\r\n      email,\r\n      password,\r\n    };\r\n\r\n    fetch(`${API_BASE_URL}/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(loginData),\r\n    })\r\n      .then(response => {\r\n        if (response.ok) {\r\n          console.log('Login successful');\r\n          // 서버에서 JSON 응답이 없는 경우 처리\r\n          if (response.headers.get('content-length') === '0') {\r\n            setUser({ loggedIn: true }); // 사용자 상태를 간단히 loggedIn: true로 설정\r\n          } else {\r\n            return response.json(); // 응답이 JSON인 경우에만 파싱\r\n          }\r\n          navigate('/'); // 메인 페이지로 이동\r\n        } else {\r\n          setError('로그인에 실패했습니다. 다시 시도해 주세요.');\r\n          throw new Error('Login failed');\r\n        }\r\n      })\r\n      .then(data => {\r\n        if (data) {\r\n          console.log('User data received:', data);\r\n          setUser(data); // 서버에서 받은 유저 정보를 설정\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error logging in:', error);\r\n        setError('서버 오류가 발생했습니다. 나중에 다시 시도해 주세요.');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <form onSubmit={handleLogin} className=\"login-form\">\r\n        <h2>로그인</h2>\r\n        {error && <p className=\"error-message\">{error}</p>} {/* 오류 메시지 표시 */}\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"이메일\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\">로그인</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport './FreeBoard.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';\r\n\r\nconst FreeBoard = () => {\r\n  const [posts, setPosts] = useState([]); // 게시글 데이터를 관리할 상태\r\n  const { boardId } = useParams(); // 현재 게시판 ID 가져오기\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // 특정 게시판의 게시글 목록 조회\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        if (data.results) {\r\n          setPosts(data.results); // 명세서에 따라 results 배열을 사용\r\n        }\r\n      })\r\n      .catch(error => console.error('Error fetching posts:', error));\r\n  }, [boardId]);\r\n\r\n  const handleCreatePost = () => {\r\n    navigate(`/boards/${boardId}/new-post`);\r\n  };\r\n\r\n  const handleViewPost = (postId) => {\r\n    navigate(`/boards/${boardId}/posts/${postId}`);\r\n  };\r\n\r\n  const handleUpdatePost = (postId) => {\r\n    navigate(`/boards/${boardId}/posts/${postId}/edit`);\r\n  };\r\n\r\n  const handleDeletePost = (postId) => {\r\n    // 게시글 삭제 요청\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ postId }), // 명세서에 따라 postId를 body에 포함\r\n    })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Failed to delete post');\r\n        }\r\n        // 게시글 목록에서 삭제된 게시글 제거\r\n        setPosts(posts.filter(post => post.pid !== postId));\r\n      })\r\n      .catch(error => console.error('Error deleting post:', error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"freeboard-container\">\r\n      <h2>자유게시판</h2>\r\n      {posts.length > 0 ? (\r\n        <div className=\"post-list\">\r\n          {posts.map(post => (\r\n            <div key={post.pid} className=\"post-item\">\r\n              <div className=\"post-info\">\r\n                <h3 className=\"post-title\" onClick={() => handleViewPost(post.pid)}>{post.title}</h3>\r\n                <div className=\"post-meta\">\r\n                  <span className=\"post-author\">작성자: {post.writer}</span>\r\n                  <span className=\"post-views\">조회수: {post.views}</span>\r\n                  <button onClick={() => handleUpdatePost(post.pid)}>수정</button>\r\n                  <button onClick={() => handleDeletePost(post.pid)}>삭제</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <p>게시글이 없습니다. 글쓰기를 통해 새 게시글을 작성해보세요.</p>\r\n      )}\r\n      <button className=\"write-button\" onClick={handleCreatePost}>글쓰기</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FreeBoard;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport './NewPost.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';\r\n\r\nconst NewPost = () => {\r\n  const [title, setTitle] = useState(''); // 제목 상태 관리\r\n  const [content, setContent] = useState(''); // 내용 상태 관리\r\n  const { boardId } = useParams(); // URL에서 boardId를 가져옴\r\n  const navigate = useNavigate(); // 페이지 이동을 위한 훅\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!boardId) {\r\n      console.error('boardId is undefined.');\r\n      return;\r\n    }\r\n\r\n    const newPost = {\r\n      title,\r\n      content,\r\n      bId: boardId, // boardId를 bId로 설정\r\n    };\r\n    \r\n    // API 호출하여 새로운 게시글 생성\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(newPost),\r\n    })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Failed to create post');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(() => {\r\n        navigate(`/boards/${boardId}`); // 성공 시 해당 게시판 페이지로 이동\r\n      })\r\n      .catch(error => console.error('Error creating post:', error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"new-post-container\">\r\n      <h2>새 글 작성</h2>\r\n      <form onSubmit={handleSubmit} className=\"new-post-form\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"제목\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          required\r\n        />\r\n        <textarea\r\n          placeholder=\"내용\"\r\n          value={content}\r\n          onChange={(e) => setContent(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\" className=\"submit-button\">작성</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPost;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport './PostDetail.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';  // API 기본 URL 설정\r\n\r\nconst PostDetail = () => {\r\n  const { boardId, postId } = useParams(); // 게시글의 ID를 URL에서 가져옵니다.\r\n  const navigate = useNavigate();\r\n  const [post, setPost] = useState(null); // 현재 게시글을 저장할 상태입니다.\r\n  const [comments, setComments] = useState([]); // 댓글 목록을 저장할 상태입니다.\r\n  const [newComment, setNewComment] = useState(''); // 새 댓글을 저장할 상태입니다.\r\n\r\n  useEffect(() => {\r\n    // 게시글 조회\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts/${postId}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setPost(data); // 백엔드에서 받은 게시글 데이터를 상태에 저장합니다.\r\n        return fetch(`${API_BASE_URL}/boards/${boardId}/posts/${postId}/comments`);\r\n      })\r\n      .then(response => response.json())\r\n      .then(data => setComments(data)) // 댓글 데이터를 상태에 저장합니다.\r\n      .catch(error => console.error('Error fetching post or comments:', error));\r\n  }, [boardId, postId]);\r\n\r\n  const handleAddComment = (e) => {\r\n    e.preventDefault();\r\n    if (newComment.trim() === '') return;\r\n\r\n    const commentData = {\r\n      content: newComment,\r\n    };\r\n\r\n    // 댓글 작성 API 호출\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts/${postId}/comments`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(commentData),\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setComments([...comments, data]); // 새 댓글을 기존 댓글에 추가\r\n        setNewComment(''); // 입력란 초기화\r\n      })\r\n      .catch(error => console.error('Error adding comment:', error));\r\n  };\r\n\r\n  const handleDeleteComment = (commentId) => {\r\n    // 댓글 삭제 API 호출\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts/${postId}/comments/${commentId}`, {\r\n      method: 'DELETE',\r\n    })\r\n      .then(() => {\r\n        setComments(comments.filter(comment => comment.id !== commentId));\r\n      })\r\n      .catch(error => console.error('Error deleting comment:', error));\r\n  };\r\n\r\n  const handleDeletePost = () => {\r\n    // 게시글 삭제 API 호출\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts/${postId}`, {\r\n      method: 'DELETE',\r\n    })\r\n      .then(() => {\r\n        navigate(`/boards/${boardId}`); // 삭제 후 게시판 페이지로 이동\r\n      })\r\n      .catch(error => console.error('Error deleting post:', error));\r\n  };\r\n\r\n  if (!post) return <div>해당 글을 찾을 수 없습니다.</div>;\r\n\r\n  return (\r\n    <div className=\"post-detail-container\">\r\n      <h2>{post.title}</h2>\r\n      <p className=\"post-content\">{post.content}</p>\r\n      <div className=\"post-meta\">\r\n        <span>작성자: {post.author}</span>\r\n        <span>조회수: {post.views}</span>\r\n      </div>\r\n      <button className=\"delete-post-button\" onClick={handleDeletePost}>글 삭제</button>\r\n\r\n      <div className=\"comments-section\">\r\n        <h3>댓글</h3>\r\n        {comments.length > 0 ? (\r\n          <ul className=\"comments-list\">\r\n            {comments.map((comment) => (\r\n              <li key={comment.id} className=\"comment-item\">\r\n                <span className=\"comment-date\">{comment.createdAt}</span>\r\n                <p className=\"comment-content\">{comment.content}</p>\r\n                <button className=\"delete-comment-button\" onClick={() => handleDeleteComment(comment.id)}>댓글 삭제</button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        ) : (\r\n          <p>아직 댓글이 없습니다. 첫 댓글을 남겨보세요!</p>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"comment-form\">\r\n        <textarea\r\n          placeholder=\"댓글을 작성하세요...\"\r\n          value={newComment}\r\n          onChange={(e) => setNewComment(e.target.value)}\r\n          rows=\"4\"\r\n        />\r\n        <button onClick={handleAddComment}>댓글 작성</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostDetail;\r\n","import React, { createContext, useState, useContext } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  const login = (userData) => {\r\n    setUser(userData);\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n","import React from 'react';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport './ProfilePage.css';\r\n\r\nconst ProfilePage = () => {\r\n  const { user } = useAuth();\r\n\r\n  return (\r\n    <div className=\"profile-container\">\r\n      <h2>내 정보</h2>\r\n      {user ? (\r\n        <div className=\"profile-details\">\r\n          <p><strong>Username:</strong> {user.username}</p>\r\n          <p><strong>Name:</strong> {user.name}</p>\r\n        </div>\r\n      ) : (\r\n        <p>로그인되지 않았습니다.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './SignupPage.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';\r\n\r\nconst SignupPage = () => {\r\n  const [name, setName] = useState(''); // 사용자 이름\r\n  const [email, setEmail] = useState(''); // 이메일\r\n  const [password, setPassword] = useState(''); // 비밀번호\r\n  const [confirmPassword, setConfirmPassword] = useState(''); // 비밀번호 확인\r\n  const [nickname, setNickname] = useState(''); // 닉네임\r\n  const [error, setError] = useState(''); // 오류 메시지\r\n  const navigate = useNavigate();\r\n\r\n  const handleSignup = (e) => {\r\n    e.preventDefault();\r\n    if (password !== confirmPassword) {\r\n      setError('비밀번호가 일치하지 않습니다.');\r\n      return;\r\n    }\r\n  \r\n    const signupData = {\r\n      name,        // 이름\r\n      email,       // 이메일\r\n      password,    // 비밀번호\r\n      nickname,    // 닉네임\r\n    };\r\n  \r\n    console.log('Signup Data:', signupData); // 전송될 데이터를 콘솔에 출력\r\n  \r\n    fetch(`${API_BASE_URL}/signup`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(signupData),\r\n    })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('회원가입 요청이 실패했습니다.');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        if (data.success) {\r\n          navigate('/login'); // 회원가입 성공 시 로그인 페이지로 이동\r\n        } else {\r\n          setError('회원가입에 실패했습니다. 다시 시도해 주세요.');\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error signing up:', error);\r\n        setError('서버 오류가 발생했습니다. 나중에 다시 시도해 주세요.');\r\n      });\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"signup-container\">\r\n      <h2>회원가입</h2>\r\n      <form onSubmit={handleSignup} className=\"signup-form\">\r\n        {error && <p className=\"error-message\">{error}</p>} {/* 오류 메시지 표시 */}\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"이름\"\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"닉네임\"\r\n          value={nickname}\r\n          onChange={(e) => setNickname(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"이메일\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"비밀번호 확인\"\r\n          value={confirmPassword}\r\n          onChange={(e) => setConfirmPassword(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\" className=\"signup-button\">회원가입</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignupPage;\r\n","import React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\nimport Header from './components/Header';\r\nimport Home from './pages/Home';\r\nimport About from './pages/About';\r\nimport LoginPage from './pages/LoginPage';\r\nimport FreeBoard from './pages/FreeBoard';\r\nimport NewPost from './pages/NewPost';\r\nimport PostDetail from './pages/PostDetail';\r\nimport ProfilePage from './pages/ProfilePage';\r\nimport SignupPage from './pages/SignupPage';\r\n\r\nconst App = () => {\r\n  const [user, setUser] = useState(null); // 전역으로 로그인 상태 관리\r\n\r\n  console.log('App: Current user state:', user);\r\n\r\n  return (\r\n    <Router>\r\n      <Header user={user} setUser={setUser} />\r\n      <Routes>\r\n        <Route path=\"/\" element={<Home />} />\r\n        <Route path=\"/about\" element={<About />} />\r\n        <Route path=\"/login\" element={<LoginPage setUser={setUser} />} /> {/* setUser 전달 */}\r\n        <Route path=\"/signup\" element={<SignupPage />} />\r\n        <Route path=\"/freeboard\" element={<FreeBoard />} />\r\n        <Route path=\"/profile\" element={<ProfilePage />} />\r\n        \r\n        {/* 게시판 관련 라우트 */}\r\n        <Route path=\"/boards/:boardId\" element={<FreeBoard />} />\r\n        <Route path=\"/boards/:boardId/new-post\" element={<NewPost />} />\r\n        <Route path=\"/boards/:boardId/posts/:postId\" element={<PostDetail />} />\r\n        <Route path=\"/boards/:boardId/posts/:postId/edit\" element={<NewPost />} /> {/* 수정 시 NewPost 재사용 */}\r\n      </Routes>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { AuthProvider } from './context/AuthContext';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  //<React.StrictMode>\r\n    <AuthProvider>\r\n      <App />\r\n    </AuthProvider>\r\n  //</React.StrictMode>\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}