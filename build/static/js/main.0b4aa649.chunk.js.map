{"version":3,"sources":["components/Header.js","components/MainContent.js","pages/Home.js","pages/About.js","pages/LoginPage.js","pages/FreeBoard.js","pages/NewPost.js","pages/PostDetail.js","context/AuthContext.js","pages/ProfilePage.js","pages/SignupPage.js","App.js","reportWebVitals.js","index.js"],"names":["Header","user","setUser","useState","navigate","useNavigate","useEffect","fetch","method","credentials","then","response","status","ok","json","Error","data","isLoggedIn","catch","error","console","handleProfile","React","createElement","className","onClick","Fragment","handleLogout","handleSignup","MainContent","alert","Home","About","LoginPage","_ref","email","setEmail","password","setPassword","setError","onSubmit","e","preventDefault","loginData","log","headers","Content-Type","body","JSON","stringify","sessionId","Cookies","get","type","placeholder","value","onChange","target","required","FreeBoard","posts","setPosts","boardId","useParams","results","length","map","post","key","pid","postId","handleViewPost","title","writer","views","handleUpdatePost","filter","handleDeletePost","handleCreatePost","NewPost","setTitle","content","setContent","newPost","bId","PostDetail","setPost","comments","setComments","newComment","setNewComment","author","comment","id","createdAt","commentId","handleDeleteComment","rows","trim","commentData","AuthContext","createContext","AuthProvider","children","Provider","login","userData","logout","ProfilePage","useContext","username","name","SignupPage","setName","confirmPassword","setConfirmPassword","nickname","setNickname","signupData","success","App","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.0b4aa649.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Cookies from 'js-cookie'; // Optional: 쿠키 사용 시\r\nimport './Header.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';\r\n\r\nconst Header = () => {\r\n  const [user, setUser] = useState(null); // 로그인 상태를 관리할 state\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // 로그인 상태 확인을 위한 API 호출\r\n    fetch(`${API_BASE_URL}/isLogin`, {\r\n      method: 'GET',\r\n      credentials: 'include', // 쿠키를 포함하여 요청\r\n    })\r\n      .then(response => {\r\n        if (response.status === 401) {\r\n          // 401 Unauthorized 상태일 경우 로그인되지 않은 것으로 간주\r\n          setUser(null);\r\n        } else if (response.ok) {\r\n          return response.json();\r\n        } else {\r\n          throw new Error('Failed to verify login status');\r\n        }\r\n      })\r\n      .then(data => {\r\n        if (data && data.isLoggedIn) {\r\n          setUser(data.user); // 로그인된 사용자 정보 설정\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error checking login status:', error);\r\n        setUser(null); // 오류 발생 시에도 로그인되지 않은 상태로 처리\r\n      });\r\n  }, []);\r\n\r\n  const handleLogout = () => {\r\n    fetch(`${API_BASE_URL}/logout`, {\r\n      method: 'POST',\r\n      credentials: 'include', // 쿠키를 포함하여 요청\r\n    })\r\n      .then(() => {\r\n        setUser(null); // 로그아웃 시 user 상태를 null로 설정\r\n        navigate('/');\r\n      })\r\n      .catch(error => {\r\n        console.error('Error logging out:', error);\r\n      });\r\n  };\r\n\r\n  const handleProfile = () => {\r\n    if (user) {\r\n      navigate('/profile');\r\n    } else {\r\n      navigate('/login');\r\n    }\r\n  };\r\n\r\n  const handleSignup = () => {\r\n    navigate('/signup');\r\n  };\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"header-left\">\r\n        <h1 onClick={() => navigate('/')}>Jootcamp</h1>\r\n        <nav className=\"nav\">\r\n          <ul>\r\n            <li><button onClick={() => navigate('/freeboard')}>자유게시판</button></li>\r\n            <li><button onClick={() => navigate('/mypaths')}>My Paths</button></li>\r\n            <li><button onClick={() => navigate('/mytracks')}>My Tracks</button></li>\r\n            <li><button onClick={() => navigate('/myactivities')}>My Activities</button></li>\r\n            <li><button onClick={() => navigate('/teams')}>Teams</button></li>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n      <div className=\"header-right\">\r\n        {user ? (\r\n          <>\r\n            <button className=\"info-button\" onClick={handleProfile}>내 정보</button>\r\n            <button className=\"login-button\" onClick={handleLogout}>Logout</button>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <button className=\"info-button\" onClick={handleProfile}>Login</button>\r\n            <button className=\"signup-button\" onClick={handleSignup}>회원가입</button>\r\n          </>\r\n        )}\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './MainContent.css';\r\n\r\nconst MainContent = () => {\r\n  return (\r\n    <main className=\"main-content\">\r\n      <h2>Welcome to Jootcamp</h2>\r\n      <nav className=\"content-nav\">\r\n        <button onClick={() => alert('All Content clicked')}>All Content</button>\r\n        <button onClick={() => alert('Announcements clicked')}>Announcements</button>\r\n        <button onClick={() => alert('My Information clicked')}>My Information</button>\r\n      </nav>\r\n      <div className=\"content-sections\">\r\n        {/* Your sections go here */}\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default MainContent;\r\n","import React from 'react';\r\nimport MainContent from '../components/MainContent';\r\nimport './Home.css';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"home\">\r\n      <MainContent />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nconst About = () => {\r\n  return (\r\n    <div>\r\n      <h2>About Jootcamp</h2>\r\n      <p>Jootcamp is a platform for coders to share knowledge and learn together.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Cookies from 'js-cookie';\r\nimport './LoginPage.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';\r\n\r\nconst LoginPage = ({ setUser }) => { \r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n\r\n    const loginData = {\r\n      email,\r\n      password,\r\n    };\r\n\r\n    console.log('로그인 시도:', loginData); // 디버그: 로그인 시도 시의 데이터 출력\r\n\r\n    fetch(`${API_BASE_URL}/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(loginData),\r\n      credentials: 'include', // 쿠키를 포함하여 요청\r\n    })\r\n      .then(response => {\r\n        console.log('서버 응답 상태 코드:', response.status); // 디버그: 서버 응답 코드 확인\r\n        if (response.ok) {\r\n          // 로그인 성공 시, 쿠키에서 세션 ID를 가져와서 setUser 호출\r\n          const sessionId = Cookies.get('sessionId');\r\n          console.log('세션 ID 확인:', sessionId); // 디버그: 쿠키에서 세션 ID 출력\r\n          if (sessionId) {\r\n            setUser({ sessionId }); // 로그인된 사용자 정보 설정\r\n            console.log('User state 설정 완료:', { sessionId }); // 디버그: setUser 호출 후\r\n          }\r\n          navigate('/'); // 메인 페이지로 이동\r\n        } else {\r\n          setError('로그인에 실패했습니다. 다시 시도해 주세요.');\r\n          console.error('로그인 실패: 서버 응답이 올바르지 않습니다.'); // 디버그: 로그인 실패 로그\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('로그인 중 오류 발생:', error);\r\n        setError('서버 오류가 발생했습니다. 나중에 다시 시도해 주세요.');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <form onSubmit={handleLogin} className=\"login-form\">\r\n        <h2>로그인</h2>\r\n        {error && <p className=\"error-message\">{error}</p>} {/* 오류 메시지 표시 */}\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"이메일\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\">로그인</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport './FreeBoard.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';\r\n\r\nconst FreeBoard = () => {\r\n  const [posts, setPosts] = useState([]); // 게시글 데이터를 관리할 상태\r\n  const { boardId } = useParams(); // 현재 게시판 ID 가져오기\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // 특정 게시판의 게시글 목록 조회\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        if (data.results) {\r\n          setPosts(data.results); // 명세서에 따라 results 배열을 사용\r\n        }\r\n      })\r\n      .catch(error => console.error('Error fetching posts:', error));\r\n  }, [boardId]);\r\n\r\n  const handleCreatePost = () => {\r\n    navigate(`/boards/${boardId}/new-post`);\r\n  };\r\n\r\n  const handleViewPost = (postId) => {\r\n    navigate(`/boards/${boardId}/posts/${postId}`);\r\n  };\r\n\r\n  const handleUpdatePost = (postId) => {\r\n    navigate(`/boards/${boardId}/posts/${postId}/edit`);\r\n  };\r\n\r\n  const handleDeletePost = (postId) => {\r\n    // 게시글 삭제 요청\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ postId }), // 명세서에 따라 postId를 body에 포함\r\n    })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Failed to delete post');\r\n        }\r\n        // 게시글 목록에서 삭제된 게시글 제거\r\n        setPosts(posts.filter(post => post.pid !== postId));\r\n      })\r\n      .catch(error => console.error('Error deleting post:', error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"freeboard-container\">\r\n      <h2>자유게시판</h2>\r\n      {posts.length > 0 ? (\r\n        <div className=\"post-list\">\r\n          {posts.map(post => (\r\n            <div key={post.pid} className=\"post-item\">\r\n              <div className=\"post-info\">\r\n                <h3 className=\"post-title\" onClick={() => handleViewPost(post.pid)}>{post.title}</h3>\r\n                <div className=\"post-meta\">\r\n                  <span className=\"post-author\">작성자: {post.writer}</span>\r\n                  <span className=\"post-views\">조회수: {post.views}</span>\r\n                  <button onClick={() => handleUpdatePost(post.pid)}>수정</button>\r\n                  <button onClick={() => handleDeletePost(post.pid)}>삭제</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <p>게시글이 없습니다. 글쓰기를 통해 새 게시글을 작성해보세요.</p>\r\n      )}\r\n      <button className=\"write-button\" onClick={handleCreatePost}>글쓰기</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FreeBoard;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport './NewPost.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';\r\n\r\nconst NewPost = () => {\r\n  const [title, setTitle] = useState(''); // 제목 상태 관리\r\n  const [content, setContent] = useState(''); // 내용 상태 관리\r\n  const { boardId } = useParams(); // URL에서 boardId를 가져옴\r\n  const navigate = useNavigate(); // 페이지 이동을 위한 훅\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!boardId) {\r\n      console.error('boardId is undefined.');\r\n      return;\r\n    }\r\n\r\n    const newPost = {\r\n      title,\r\n      content,\r\n      bId: boardId, // boardId를 bId로 설정\r\n    };\r\n    \r\n    // API 호출하여 새로운 게시글 생성\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(newPost),\r\n    })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Failed to create post');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(() => {\r\n        navigate(`/boards/${boardId}`); // 성공 시 해당 게시판 페이지로 이동\r\n      })\r\n      .catch(error => console.error('Error creating post:', error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"new-post-container\">\r\n      <h2>새 글 작성</h2>\r\n      <form onSubmit={handleSubmit} className=\"new-post-form\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"제목\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          required\r\n        />\r\n        <textarea\r\n          placeholder=\"내용\"\r\n          value={content}\r\n          onChange={(e) => setContent(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\" className=\"submit-button\">작성</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPost;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport './PostDetail.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';  // API 기본 URL 설정\r\n\r\nconst PostDetail = () => {\r\n  const { boardId, postId } = useParams(); // 게시글의 ID를 URL에서 가져옵니다.\r\n  const navigate = useNavigate();\r\n  const [post, setPost] = useState(null); // 현재 게시글을 저장할 상태입니다.\r\n  const [comments, setComments] = useState([]); // 댓글 목록을 저장할 상태입니다.\r\n  const [newComment, setNewComment] = useState(''); // 새 댓글을 저장할 상태입니다.\r\n\r\n  useEffect(() => {\r\n    // 게시글 조회\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts/${postId}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setPost(data); // 백엔드에서 받은 게시글 데이터를 상태에 저장합니다.\r\n        return fetch(`${API_BASE_URL}/boards/${boardId}/posts/${postId}/comments`);\r\n      })\r\n      .then(response => response.json())\r\n      .then(data => setComments(data)) // 댓글 데이터를 상태에 저장합니다.\r\n      .catch(error => console.error('Error fetching post or comments:', error));\r\n  }, [boardId, postId]);\r\n\r\n  const handleAddComment = (e) => {\r\n    e.preventDefault();\r\n    if (newComment.trim() === '') return;\r\n\r\n    const commentData = {\r\n      content: newComment,\r\n    };\r\n\r\n    // 댓글 작성 API 호출\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts/${postId}/comments`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(commentData),\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setComments([...comments, data]); // 새 댓글을 기존 댓글에 추가\r\n        setNewComment(''); // 입력란 초기화\r\n      })\r\n      .catch(error => console.error('Error adding comment:', error));\r\n  };\r\n\r\n  const handleDeleteComment = (commentId) => {\r\n    // 댓글 삭제 API 호출\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts/${postId}/comments/${commentId}`, {\r\n      method: 'DELETE',\r\n    })\r\n      .then(() => {\r\n        setComments(comments.filter(comment => comment.id !== commentId));\r\n      })\r\n      .catch(error => console.error('Error deleting comment:', error));\r\n  };\r\n\r\n  const handleDeletePost = () => {\r\n    // 게시글 삭제 API 호출\r\n    fetch(`${API_BASE_URL}/boards/${boardId}/posts/${postId}`, {\r\n      method: 'DELETE',\r\n    })\r\n      .then(() => {\r\n        navigate(`/boards/${boardId}`); // 삭제 후 게시판 페이지로 이동\r\n      })\r\n      .catch(error => console.error('Error deleting post:', error));\r\n  };\r\n\r\n  if (!post) return <div>해당 글을 찾을 수 없습니다.</div>;\r\n\r\n  return (\r\n    <div className=\"post-detail-container\">\r\n      <h2>{post.title}</h2>\r\n      <p className=\"post-content\">{post.content}</p>\r\n      <div className=\"post-meta\">\r\n        <span>작성자: {post.author}</span>\r\n        <span>조회수: {post.views}</span>\r\n      </div>\r\n      <button className=\"delete-post-button\" onClick={handleDeletePost}>글 삭제</button>\r\n\r\n      <div className=\"comments-section\">\r\n        <h3>댓글</h3>\r\n        {comments.length > 0 ? (\r\n          <ul className=\"comments-list\">\r\n            {comments.map((comment) => (\r\n              <li key={comment.id} className=\"comment-item\">\r\n                <span className=\"comment-date\">{comment.createdAt}</span>\r\n                <p className=\"comment-content\">{comment.content}</p>\r\n                <button className=\"delete-comment-button\" onClick={() => handleDeleteComment(comment.id)}>댓글 삭제</button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        ) : (\r\n          <p>아직 댓글이 없습니다. 첫 댓글을 남겨보세요!</p>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"comment-form\">\r\n        <textarea\r\n          placeholder=\"댓글을 작성하세요...\"\r\n          value={newComment}\r\n          onChange={(e) => setNewComment(e.target.value)}\r\n          rows=\"4\"\r\n        />\r\n        <button onClick={handleAddComment}>댓글 작성</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostDetail;\r\n","import React, { createContext, useState, useContext } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  const login = (userData) => {\r\n    setUser(userData);\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n","import React from 'react';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport './ProfilePage.css';\r\n\r\nconst ProfilePage = () => {\r\n  const { user } = useAuth();\r\n\r\n  return (\r\n    <div className=\"profile-container\">\r\n      <h2>내 정보</h2>\r\n      {user ? (\r\n        <div className=\"profile-details\">\r\n          <p><strong>Username:</strong> {user.username}</p>\r\n          <p><strong>Name:</strong> {user.name}</p>\r\n        </div>\r\n      ) : (\r\n        <p>로그인되지 않았습니다.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './SignupPage.css';\r\n\r\nconst API_BASE_URL = 'http://13.125.19.45:8080';\r\n\r\nconst SignupPage = () => {\r\n  const [name, setName] = useState(''); // 사용자 이름\r\n  const [email, setEmail] = useState(''); // 이메일\r\n  const [password, setPassword] = useState(''); // 비밀번호\r\n  const [confirmPassword, setConfirmPassword] = useState(''); // 비밀번호 확인\r\n  const [nickname, setNickname] = useState(''); // 닉네임\r\n  const [error, setError] = useState(''); // 오류 메시지\r\n  const navigate = useNavigate();\r\n\r\n  const handleSignup = (e) => {\r\n    e.preventDefault();\r\n    if (password !== confirmPassword) {\r\n      setError('비밀번호가 일치하지 않습니다.');\r\n      return;\r\n    }\r\n  \r\n    const signupData = {\r\n      name,        // 이름\r\n      email,       // 이메일\r\n      password,    // 비밀번호\r\n      nickname,    // 닉네임\r\n    };\r\n  \r\n    console.log('Signup Data:', signupData); // 전송될 데이터를 콘솔에 출력\r\n  \r\n    fetch(`${API_BASE_URL}/signup`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(signupData),\r\n    })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('회원가입 요청이 실패했습니다.');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        if (data.success) {\r\n          navigate('/login'); // 회원가입 성공 시 로그인 페이지로 이동\r\n        } else {\r\n          setError('회원가입에 실패했습니다. 다시 시도해 주세요.');\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error signing up:', error);\r\n        setError('서버 오류가 발생했습니다. 나중에 다시 시도해 주세요.');\r\n      });\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"signup-container\">\r\n      <h2>회원가입</h2>\r\n      <form onSubmit={handleSignup} className=\"signup-form\">\r\n        {error && <p className=\"error-message\">{error}</p>} {/* 오류 메시지 표시 */}\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"이름\"\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"닉네임\"\r\n          value={nickname}\r\n          onChange={(e) => setNickname(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"이메일\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"비밀번호 확인\"\r\n          value={confirmPassword}\r\n          onChange={(e) => setConfirmPassword(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\" className=\"signup-button\">회원가입</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignupPage;\r\n","import React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\nimport Header from './components/Header';\r\nimport Home from './pages/Home';\r\nimport About from './pages/About';\r\nimport LoginPage from './pages/LoginPage';\r\nimport FreeBoard from './pages/FreeBoard';\r\nimport NewPost from './pages/NewPost';\r\nimport PostDetail from './pages/PostDetail';\r\nimport ProfilePage from './pages/ProfilePage';\r\nimport SignupPage from './pages/SignupPage';\r\n\r\nconst App = () => {\r\n  const [user, setUser] = useState(null); // 로그인 상태를 관리하는 state\r\n\r\n  return (\r\n    <Router>\r\n      {/* Header에 user와 setUser를 전달하여 상태를 관리 */}\r\n      <Header user={user} setUser={setUser} />\r\n      <Routes>\r\n        <Route path=\"/\" element={<Home />} />\r\n        <Route path=\"/about\" element={<About />} />\r\n        <Route path=\"/login\" element={<LoginPage setUser={setUser} />} />\r\n        <Route path=\"/signup\" element={<SignupPage />} />\r\n        <Route path=\"/freeboard\" element={<FreeBoard />} />\r\n        <Route path=\"/profile\" element={<ProfilePage />} />\r\n        \r\n        {/* 게시판 관련 라우트 */}\r\n        <Route path=\"/boards/:boardId\" element={<FreeBoard />} />\r\n        <Route path=\"/boards/:boardId/new-post\" element={<NewPost />} />\r\n        <Route path=\"/boards/:boardId/posts/:postId\" element={<PostDetail />} />\r\n        <Route path=\"/boards/:boardId/posts/:postId/edit\" element={<NewPost />} /> {/* 수정 시 NewPost 재사용 */}\r\n      </Routes>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { AuthProvider } from './context/AuthContext';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  //<React.StrictMode>\r\n    <AuthProvider>\r\n      <App />\r\n    </AuthProvider>\r\n  //</React.StrictMode>\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}